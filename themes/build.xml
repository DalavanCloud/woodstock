<?xml version='1.0' encoding='ISO-8859-1' ?>
<!--
 The contents of this file are subject to the terms
 of the Common Development and Distribution License
 (the License).  You may not use this file except in
 compliance with the License.
 
 You can obtain a copy of the license at
 https://woodstock.dev.java.net/public/CDDLv1.0.html.
 See the License for the specific language governing
 permissions and limitations under the License.
 
 When distributing Covered Code, include this CDDL
 Header Notice in each file and include the License file
 at https://woodstock.dev.java.net/public/CDDLv1.0.html.
 If applicable, add the following below the CDDL Header,
 with the fields enclosed by brackets [] replaced by
 you own identifying information:
 "Portions Copyrighted [year] [name of copyright owner]"
 
 Copyright 2007 Sun Microsystems, Inc. All rights reserved.
-->

<project name="themes" default="all" basedir=".">
    
    <tstamp>
        <format property="BuildNumber" pattern="yyyyMMddHHmm"/>
    </tstamp>
    
    <property file="../build.properties"/>
    <property file="build.properties"/>

    <condition property="theme.name" value="${theme.name}" else="suntheme">
	<isset property="theme.name"/>
    </condition>

    <!-- load theme properties files if they exist -->

    <property file="../${theme.name}.properties"/>
    <property file="${theme.name}.properties"/>

    <!-- default directories -->
    <property name="dist" value="${basedir}/dist"/>
    <property name="doc" value="${basedir}/doc"/>
    <property name="build" value="${basedir}/build"/>
    <property name="src" value="${basedir}/src"/>
    <property name="tools" value="${basedir}/../tools"/>
    <property name="jsdocs" value="${basedir}/jsdocs"/>

    <!-- Building a theme now depends on webui-jsf.jar 
         In the future it will depend on just the theme implementation
	 jar, but for now the SPI ThemeService 
	 SunthemeThemeService implementation
	 relies on com.sun.webui.theme.ThemeService which is in
	 webui-jsf.jar -->

    <!-- System globals -->
    <property name="webui.jar"
              value="${components.home}/lib/webui-jsf.jar"/>
    <property name="tools.jar"
              value="${tools}/lib/woodstock-tools.jar"/>
    <property name="rhino.jar"
              value="${tools}/lib/custom_rhino.jar"/>
    <property name="jsdoc.dir"
              value="${tools}/jsdoctoolkit/src"/>
    <property name="jsdoc.exec"
              value="${jsdoc.dir}/app/run.js"/>
    <property name="jsdoc.template"
              value="${jsdoc.dir}/templates/suntheme"/>

    <loadfile property="copyright" srcFile="${doc}/copyright.txt"/>
    <loadfile property="copyright-css" srcFile="${doc}/copyright-css.txt"/>

    <!-- Default values. This build file will always build a "suntheme"
	 if no ${theme.name} property or ${theme.name}.properties
	 files are defined in a "${theme.name}.properties" properties
	 file or from the command line -->
    
    <property name="theme.name" value="suntheme"/>
    <property name="theme.src-dir" value="${src}/${theme.name}"/>
    <property name="theme.package"  value="com.sun.webui.jsf.suntheme"/>
    <property name="theme.build-dir" value="${build}/${theme.name}"/>

    <!-- Derive a package path -->
    <!-- make basedir a package -->
    <pathconvert  property="__basedir-pkg__" dirsep="/">
	<path path="${basedir}"/>
	<unpackagemapper from="*" to="*"/>
    </pathconvert>

    <!-- convert the package into a file path
	 and map out the basedir package -->
    <pathconvert property="theme.package-path" dirsep="/">
	<path path="${theme.package}"/>
	<unpackagemapper from="*" to="*"/>
	<map from="${__basedir-pkg__}/" to=""/>
    </pathconvert>

    <property name="theme.build-package-path"
	location="${theme.build-dir}/${theme.package-path}"/>

    <property name="theme.l10n-dir" value="${basedir}/dist"/>
    <property name="theme.jar" value="${basedir}/dist/webui-jsf-suntheme.jar"/>
    <property name="theme.version" value="4.1"/>
    <property name="theme.css-name" value="_sun4"/>
    <property name="theme.service-class" value="SunthemeThemeService"/>
    <property name="theme.service-class-template"
	value="${theme.src-dir}/${theme.package-path}/${theme.service-class}.java"/>    
    <property name="theme.service-properties-template"
	value="${theme.src-dir}/${theme.package-path}/${theme.name}.properties"/>

    <!-- Not currently documented for cloning -->
    <property name="theme.master.css" value="css_master.css"/>
    <property name="theme.master-all.css" value="css_master-all.css"/>
    <property name="theme.js-module-prefix" value="webui.${theme.name}"/>
    <property name="theme.webui.js" value="webui.js"/>
    <property name="theme.webui-all.js" value="webui-all.js"/>
    <property name="theme.webui-jsfx.js" value="webui-jsfx.js"/>
    <property name="theme.webui-jsfx-all.js" value="webui-jsfx-all.js"/>
    <property name="theme.combined-image" value="combinedImage.png"/>

    <property name="theme.webui-js-files" value="webui-js-files"/>
    <property name="theme.webui-all-js-files" value="webui-all-js-files"/>
    <property name="theme.webui-jsfx-js-files" value="webui-jsfx-js-files"/>
    <property name="theme.webui-jsfx-all-js-files"
	value="webui-jsfx-all-js-files"/>

    <property name="theme.jar-manifest"
	value="${theme.build-dir}/META-INF/manifest.mf"/>

    <property name="theme.exclude-js-files" value="exclude-js-files"/>
    <property name="theme.js-filter-set" value="js-filter-set"/>
    <property name="theme.jar-file-set" value="jar-file-set"/>


    <!-- L10n properties -->
    <property name="theme.l10n-build-dir"
	location="${theme.build-dir}/translatedFiles"/>
    <property name="theme.l10n-build-package-path"
    location="${theme.l10n-build-dir}/${theme.package-path}"/>

    <!-- The default filter set for Javascript files. -->
    <filterset id="js-filter-set">
	<filter token="THEME" value="${theme.name}"/> 
	<filter token="THEME_CSS" value="${theme.css-name}"/>
	<filter token="THEME_VERSION" value="${theme.version}"/> 
    </filterset>

    <!-- The default file set for the theme jar. -->
    <fileset id="jar-file-set" dir="${theme.build-dir}">
	<exclude name="${theme.package-path}/${theme.service-class}.java"/>
	<exclude name="translatedFiles/**/*"/>
    </fileset>

    <!-- The patternsets for the combined javascript files -->

    <!-- The files that are commonly omitted. Some files (e.g., dnd.js) may be
         included via widgets. -->
    <patternset id="exclude-js-files">
	<exclude name="addRemove.js" />
	<exclude name="commonTasksSection.js" />
	<exclude name="dnd.js" />
	<exclude name="editableList.js" />
	<exclude name="fileChooser.js" />
	<exclude name="orderableList.js" />
	<exclude name="scheduler.js" />
	<exclude name="tree.js" />
	<exclude name="wizard.js" />
	<exclude name="widget/dndContainer.js" />
	<exclude name="widget/table2.js" />
	<exclude name="theme/nls/"/>
    </patternset>

    <!-- "webui.js" -->
    <patternset id="webui-js-files">
	<include name="**/*.js"/>
	<exclude name="widget/jsfx/**" />
	<patternset refid="${theme.exclude-js-files}"/>
    </patternset>

    <!-- "webui-all.js" -->
    <patternset id="webui-all-js-files">
	<include name="**/*.js"/>
	<exclude name="widget/jsfx/**" />
	<exclude name="theme/nls/"/>
    </patternset>

    <!-- "webui-jsfx.js" -->
    <patternset id="webui-jsfx-js-files">
	<include name="**/*.js"/>
	<patternset refid="${theme.exclude-js-files}"/>
    </patternset>

    <!-- "webui-jsfx-all.js" -->
    <patternset id="webui-jsfx-all-js-files">
	<include name="**/*.js"/>
	<exclude name="theme/nls/"/>
    </patternset>

    <!-- Public Targets -->

    <!-- ========== all ========== -->
    <!-- Enable L10n when L10n files are committed. -->
    <!-- This creates the theme jars for component distribution.-->
    <!-- Note that that L10n jars must exist for buildL10nJsTheme to succeed
    -->
    <target name="all" 
	depends="buildTheme,buildJsTheme,buildL10nTheme,buildL10nJars,buildL10nJsTheme,jsdoc" />

    <!-- Parameters
	See the default "theme.*" properties above.
    -->
    <target name="buildTheme" description="Build a theme.">

        <mkdir dir="${theme.build-package-path}" />

	<!-- copy and substitute params from the "src" to the "build" dir
	-->
        <antcall target="_copyThemeFiles-internal_">
	    <!-- when building, files are copied to the full package path
	    -->
	    <param name="_to-dir_" value="${theme.build-package-path}"/>
	    <param name="_from-dir_" value="${theme.src-dir}"/>
	    <param name="_filter_" value="true"/>
	    <param name="_fail-on-error_" value="true"/>

	    <!-- we copy during js combining -->
	    <param name="_copy-javascript_" value="false"/>
        </antcall>

        <antcall target="_copyThemeService-internal_">
	    <param name="_to-dir_" value="${theme.build-package-path}"/>
	    <param name="_filter_" value="true"/>
        </antcall>

        <!-- copy messages.properties to messages_en.properties JSF hack -->
        <copy file="${theme.src-dir}/messages/messages.properties"
              tofile="${theme.build-package-path}/messages/messages_en.properties"/>
        
        <copy todir="${theme.build-dir}/META-INF">
            <fileset dir="${basedir}/META-INF">
                <include name="manifest.mf" /> 
                <include name="services/com.sun.webui.theme.ThemeService" /> 
            </fileset>
            <filterset>
                <filter token="DATESTAMP" value="${BuildNumber}"/>
                <filter token="THEME" value="${theme.name}"/>
                <filter token="FULL_VERSION" value="${FullVersion}"/>
                <filter token="VERSION" value="${Version}"/>
                <filter token="THEME_VERSION" value="${theme.version}"/>
                <filter token="THEME_PACKAGE" value="${theme.package}"/>
                <filter token="THEME_SERVICE_CLASS"
			value="${theme.service-class}"/>
            </filterset>
        </copy>

        <!-- Compile the Theme Service class-->
        <antcall target="compile-theme-service">
            <param name="_cmpl-java-src_" 
		value="${theme.build-package-path}"/>
            <param name="_cmpl-dest-dir_" value="${theme.build-dir}"/>
            <param name="_cmpl-service-class_" value="${theme.service-class}"/>
        </antcall>
        
        <!-- Delete the service java file from the build dir
	     But deleting the file prevents dependency checking.
        <delete file="${theme.build-package-path}/${theme.service-class}.java"/>
	-->

        <!-- Combine CSS -->
        <antcall target="combineCSS">
	    <param name="_to-dir_" value="${theme.build-package-path}/css"/>
	    <param name="_from-dir_" value="${theme.src-dir}/css"/>
	    <param name="_files-to-combine_" value="${theme.master.css}"/>
	    <param name="_combined-file_" 
		value="${theme.build-package-path}/css/${theme.master-all.css}"/>
	</antcall>

	<!-- Call combineJavascript once for each of the 
	     combined javascript files.
	    theme.webui.js
	    theme.webui-all.js
	    theme.webui-jsfx.js
	    theme.webui-jsfx-all.js
	-->
	<property name="js-dest-uncmp"
		location="${theme.build-package-path}/javascript_uncompressed"/>
	<property name="js-dest-cmp"
		location="${theme.build-package-path}/javascript"/>
	<property name="js-src" value="${theme.src-dir}/javascript"/>

	<antcall target="combineJavascript">
	    <param name="_to-dir_" value="${js-dest-uncmp}"/>
	    <param name="_from-dir_" value="${js-src}"/>
	    <param name="_pattern-set_" value="${theme.webui-js-files}"/>
	    <param name="_combined-file_" 
		value="${js-dest-uncmp}/${theme.webui.js}"/>
	</antcall>
	<antcall target="combineJavascript">
	    <param name="_to-dir_" value="${js-dest-uncmp}"/>
	    <param name="_from-dir_" value="${js-src}"/>
	    <param name="_pattern-set_"
		value="${theme.webui-all-js-files}"/>
	    <param name="_combined-file_" 
		value="${js-dest-uncmp}/${theme.webui-all.js}"/>
	</antcall>
	<antcall target="combineJavascript">
	    <param name="_to-dir_" value="${js-dest-uncmp}"/>
	    <param name="_from-dir_" value="${js-src}"/>
	    <param name="_pattern-set_"
		value="${theme.webui-jsfx-js-files}"/>
	    <param name="_combined-file_" 
		value="${js-dest-uncmp}/${theme.webui-jsfx.js}"/>
	</antcall>
	<antcall target="combineJavascript">
	    <param name="_to-dir_" value="${js-dest-uncmp}"/>
	    <param name="_from-dir_" value="${js-src}"/>
	    <param name="_pattern-set_"
		value="${theme.webui-jsfx-all-js-files}"/>
	    <param name="_combined-file_" 
		value="${js-dest-uncmp}/${theme.webui-jsfx-all.js}"/>
	</antcall>

        <antcall target="compressJavascript">
	    <param name="_to-dir_" value="${js-dest-cmp}"/>
	    <param name="_from-dir_" value="${js-dest-uncmp}"/>
	</antcall>

	<antcall target="combineImages"/>

        <antcall target="createThemeJar"/>

    </target> 

    <!-- General internal targets -->

    <target name="themejar-uptodate">
	<uptodate property="themejar-uptodate">
	    <srcfiles dir="${theme.build-dir}"
		excludes="translatedFiles/"/>
	    <mergemapper to="${theme.jar}"/>
	</uptodate>
    </target>

    <target name="createThemeJar" depends="themejar-uptodate"
	    unless="themejar-uptodate">

        <!-- Create the theme jar -->
	     <!--
             basedir="${theme.build-dir}"
	     -->
	<dirname property="__distdir__" file="${theme.jar}"/>
        <mkdir dir="${__distdir__}" />
        <jar destfile="${theme.jar}"
             manifest="${theme.jar-manifest}">
	     <fileset refid="${theme.jar-file-set}"/>
        </jar>
    </target>

    <!-- ############### L10n targets ######################## -->

    <!-- Requires only the "default" "theme.*" properties 
	 Sets "l10n-uptodate" if l10n files are up to date with the
	 l10n build files.
     -->
    <target name="l10n-uptodate">
	<!-- If the build l10n files exist and are newer
	     than the corresponding l10n properties
	     files set the l10n-uptodate property.
	-->
	<uptodate property="l10n-uptodate">
	    <srcfiles dir="${theme.src-dir}/translatedFiles"
		includes="**/*.*"/>
	    <globmapper from="*"
		to="${theme.l10n-build-package-path}/*"/>
	</uptodate>
    </target>

    <!-- Requires only the "default" "theme.*" properties -->

    <target name="buildL10nTheme" if="build-l10n"
	    depends="l10n-uptodate"
	    unless="l10n-uptodate"
	    description="Build the L10n theme jars.">

	<echo message="Building the L10n theme jars."/>

	<!-- first copy the files to a temporary location 
	     for filtering and then
	     from that location via native2ascii to the 
	     final destination.
	-->
	<property name="__l10n-tmp__"
	    location="${theme.l10n-build-dir}/tmp"/>

        <antcall target="_copyThemeFiles-internal_">

	    <param name="_from-dir_" 
		value="${theme.src-dir}/translatedFiles" />
	    <param name="_to-dir_" 
		value="${__l10n-tmp__}" />

	    <param name="_filter_" value="true"/>
	    <param name="_copy-javascript_" value="true"/>
	    <param name="_fail-on-error_" value="false"/>

        </antcall>

	<!-- make the destination directory and all the subdirectories -->
	<mkdir dir="${theme.l10n-build-package-path}"/>
	<mkdir dir="${theme.l10n-build-package-path}/css"/>
	<mkdir dir="${theme.l10n-build-package-path}/messages"/>
	<mkdir dir="${theme.l10n-build-package-path}/templates"/>
	<mkdir dir="${theme.l10n-build-package-path}/properties"/>

	<fileset id="n2afiles" dir="${theme.src-dir}/translatedFiles">
	    <include name="**/*"/>
	    <depend targetdir="${theme.l10n-build-package-path}">
		<mapper type="glob" from="*" to="*"/>
	    </depend>
	</fileset>

	<!--
	<pathconvert property="n2alist" refid="n2afiles" pathsep=",">
	    <map from="${__l10n-tmp__}${file.separator}" to=""/>
	</pathconvert>
	-->
	<pathconvert property="n2alist" refid="n2afiles" pathsep=",">
	    <map from="${theme.src-dir}/translatedFiles${file.separator}" to=""/>
	</pathconvert>

	<echo message="Running native2asci for ${n2alist}, it takes several minutes..."/>
	<!-- JAVA_HOME points to JDK on Mac, to JRE elsewhere. -->
	<condition property="_jbin_" 
		value="${java.home}${file.separator}bin"
		else="${java.home}${file.separator}..${file.separator}bin">
	    <os family="mac"/>
	</condition>

	<java jar="${tools.jar}" failonerror="true" fork="true">
	  <arg value="-native2ascii"/>
	  <arg value="-sourceDir"/>
	  <arg value="${theme.l10n-build-dir}/tmp"/>
	  <arg value="-destDir"/>
	  <arg value="${theme.l10n-build-package-path}" />
	  <arg value="-fileList"/>
	  <arg value="${n2alist}"/>
          <sysproperty key="jbin" value="${_jbin_}"/>
	</java>

	<delete dir="${__l10n-tmp__}"/>

    </target>

    <target name="buildL10nJars" if="build-l10n">

	<!-- No way to loop so the fixed set of locales is
	     de,es,fr,it,ja,ko,pt_BR,sv,zh_CN,zh_HK,zh_TW
	-->
	<antcall target="create-l10n-jar">
	    <param name="_l10n-locale_" value="de"/>
	</antcall>
	<antcall target="create-l10n-jar">
	    <param name="_l10n-locale_" value="es"/>
	</antcall>
	<antcall target="create-l10n-jar">
	    <param name="_l10n-locale_" value="fr"/>
	</antcall>
	<antcall target="create-l10n-jar">
	    <param name="_l10n-locale_" value="it"/>
	</antcall>
	<antcall target="create-l10n-jar">
	    <param name="_l10n-locale_" value="ja"/>
	</antcall>
	<antcall target="create-l10n-jar">
	    <param name="_l10n-locale_" value="ko"/>
	</antcall>
	<antcall target="create-l10n-jar">
	    <param name="_l10n-locale_" value="pt_BR"/>
	</antcall>
	<antcall target="create-l10n-jar">
	    <param name="_l10n-locale_" value="sv"/>
	</antcall>
	<antcall target="create-l10n-jar">
	    <param name="_l10n-locale_" value="zh_CN"/>
	</antcall>
	<antcall target="create-l10n-jar">
	    <param name="_l10n-locale_" value="zh_HK"/>
	</antcall>
	<antcall target="create-l10n-jar">
	    <param name="_l10n-locale_" value="zh_TW"/>
	</antcall>
    </target>

    <target name="l10n-jar-uptodate">
	<l10n-jar-name locale="${_l10n-locale_}" property="__l10n-jar__"/>
	<uptodate property="l10n-jar-uptodate">
	    <srcfiles dir="${theme.l10n-build-dir}"
	    includes="**/*_${_l10n-locale_}.properties"
		excludes="META-INF/MANIFEST.MF,**/nls/"/>
	    <mergemapper to="${__l10n-jar__}"/>
	</uptodate>
    </target>

    <!--
	Parameters

	_l10n-locale_ - the locale jar to create

	Assumes properties

	basedir - used to file manifest template
	theme.name - used to build manifest
	theme.version - used to build manifest
	theme.jar - used to derive jar name and destination dir.
	theme.l10n-build-dir
	theme.package-path
	FullVersion - used to build manifest
	Version - used to build manifest

    -->
    <target name="create-l10n-jar"
	    if="build-l10n"
	    depends="l10n-jar-uptodate"
	    unless="l10n-jar-uptodate"
	    description="Create an l10n theme jar.">

	<!-- create a manifest file -->
	<copy tofile="${theme.l10n-build-dir}/META-INF/MANIFEST.MF"
		overwrite="true">
	    <fileset dir="${basedir}/META-INF">
		<include name="l10n-manifest.mf" /> 
	    </fileset>
	    <filterset>
		<filter token="LANG" value="${_l10n-locale_}"/>
		<filter token="THEME" value="${theme.name}"/>
		<filter token="FULL_VERSION" value="${FullVersion}"/>
		<filter token="VERSION" value="${Version}"/>
		<filter token="THEME_VERSION" value="${theme.version}"/>
	    </filterset>
	</copy>

	<l10n-jar-name locale="${_l10n-locale_}" property="l10n-jar"/>
	<jar destfile="${l10n-jar}"
	    basedir="${theme.l10n-build-dir}"
	    includes="${theme.package-path}/**/*_${_l10n-locale_}.*"
	    manifest="${theme.l10n-build-dir}/META-INF/MANIFEST.MF">
	</jar>

    </target>

    <!-- Right now the only files with native encodings are the
	 messages.properties files.
    -->
    <macrodef name="supported-locales">
	<attribute name="refid" default="_msg-based_"/>
	<attribute name="property" default="supported-locales"/>
	<sequential>
	    <fileset id="_msg-based_"
		    dir="${theme.src-dir}/translatedFiles/messages">
		<include name="*.properties"/>
	    </fileset>
	    <pathconvert property="@{property}" pathsep="," refid="@{refid}">
		<chainedmapper>
		    <flattenmapper/>
		    <regexpmapper 
			from="messages_([a-zA-Z][a-zA-Z].*)\.properties" 
			to="\1" handledirsep="yes"/>
		</chainedmapper>
	    </pathconvert>
	</sequential>
    </macrodef>

    <macrodef name="l10n-jar-name">
	<attribute name="property" default="l10n-jar"/>
	<attribute name="locale"/>
	<sequential>
	    <dirname property="__dest-dir__" file="${theme.jar}"/>
	    <mkdir dir="${__dest-dir__}" />
	    <basename property="__base-name__" 
		file="${theme.jar}" suffix=".jar"/>
	    <property name="@{property}" 
		location="${__dest-dir__}/${__base-name__}_@{locale}.jar"/>
	</sequential>
    </macrodef>

    <target name="buildL10nJsTheme">

        <ant antfile="build-js-theme.xml" 
	    target="buildL10nJsTheme" inheritAll="false">
	    <property name="_js-from-dir_" value="${theme.src-dir}"/>
	    <property name="_js-to-dir_" value="${theme.build-dir}"/>
	    <property name="_js-theme-name_" value="${theme.name}"/>
	    <property name="_js-webui-jar_" value="${webui.jar}"/>
	    <property name="_js-theme-jar_" value="${theme.jar}"/>
	    <property name="_js-theme-package_" value="${theme.package}"/>
	    <property name="_js-l10n-dir_" value="${theme.l10n-dir}"/>
	 </ant>

    </target>


    <!-- ################## CSS targets ##################### -->

    <!-- Set the "css-uptodate" property  if ${_combined-file_}" is 
	 newer than "${_from-dir_}/*.css"
    -->
    <target name="css-uptodate">
	<uptodate property="css-uptodate">
	    <srcfiles dir="${_from-dir_}"
		includes="*.css"/>
	    <mergemapper to="${_combined-file_}"/>
	</uptodate>
    </target>

    <!-- Parameters

	_to-dir_ - the destination directory for css files
	_from-dir_ - the source directory of the css files.
	_files-to-combine_ - the comma separated list of files to combine.
			In this case it is a list of files that contain
			"import" statements.
	_combined-file_ - the combined css file.

	This also copies and filters CSS files from
	"${_from-dir_}" to "${_to-dir_}".

	Should depend on a copy CSS
    -->
    <target name="combineCSS" depends="css-uptodate"
	    unless="css-uptodate">

	<mkdir dir="${_to-dir_}"/>

	<!-- Should be a separate "copyCSS" -->
	<!-- Copy and filter files into the temporary dir -->
	<!--
	<copy todir="${_to-dir_}">
	    <fileset dir="${_from-dir_}">
              <exclude name="**/CVS/**" />
	    </fileset>
            <filterset>
                <filter token="THEME_CSS" value="${theme.css-name}"/>
            </filterset>
	</copy>
	-->

	<java jar="${tools.jar}" failonerror="true" fork="true">
	  <arg value="-combineCSS"/>
	  <arg value="-sourceDir"/>
	  <arg value="${_to-dir_}"/>
	  <arg value="-fileList"/>
	  <arg value="${_files-to-combine_}"/>
	  <arg value="-outFile"/>
	  <arg value="${_combined-file_}"/>
	  <arg value="-verbose"/>
	</java>

        <!-- Add copyright to combined file -->
        <replaceregexp match="^" byline="false" replace="${copyright-css}"> 
            <fileset file="${_combined-file_}"/>
        </replaceregexp>

    </target>

    <!-- #############  Javascript targets ################### -->

    <!-- Sets the "javascript-uptodate" property if
	 files in "${_from-dir_}/**/*.js" are older than files in
	 "${_to-dir_}/**/*.js". 

	 Assumes properties

	 _to-dir_ - destinatiotn directory of "**/*.js" files
	 _from-dir_ - source directory of "**/*.js" files
    -->
    <target name="javascript-uptodate">
	<uptodate property="javascript-uptodate">
	    <srcfiles dir="${_from-dir_}" includes="**/*.js"/>
	    <mapper type="glob" from="*" to="${_to-dir_}/*"/>
	</uptodate>
    </target>

    <!-- Copy and filter all javascript files to "${_to-dir_}"
	 from "${_from-dir_}" if the "javascript-uptodate" property is set.

	 Parameters

	 _to-dir_ - destination directory of "**/*.js"
	 _from-dir_ - source directory of "**/*.js"

	Assumes

	${theme.js-filter-set} used to filter js files.
    -->
    <target name="copyJavascript" depends="javascript-uptodate"
	    unless="javascript-uptodate">

	<mkdir dir="${_to-dir_}"/>

	<!-- Note that copy only copies files if outdated.
	     This allows "javascript_uncompressed" for example
	     to be used for dependency checking when compressing files.
	-->
	<!-- Copy and filter javascript files into _to-dir_ -->
	<copy todir="${_to-dir_}">
	    <fileset dir="${_from-dir_}">
		<exclude name="**/CVS/**"/>
	    </fileset>
	    <filterset refid="${theme.js-filter-set}"/>
	</copy>
    </target>

    <!-- Set the combined-js-uptodate property if
	"${_combined-file_}" is newer than "${_from-dir_}/**/*.js"
    -->
    <target name="combined-js-uptodate" depends="copyJavascript">
	<uptodate property="combined-js-uptodate">
	    <srcfiles dir="${_from-dir_}" includes="**/*.js"
		excludes="theme/nls/"/>
	    <mergemapper to="${_combined-file_}"/>
	</uptodate>
    </target>

    <!--  Create the combined file ${_combined-file_}.

	Parameters

	_to-dir_ - root of the destination for combined files
	_from-dir_ - the source of the javascipt files.
			   This directory will be written into.
	_pattern-set_ - the patternset refid defining the files to combine.
	_combined-file_ - the combined js file.

    -->
    <target name="combineJavascript" depends="combined-js-uptodate"
	    unless="combined-js-uptodate"
	    description="Create a combined javascript file.">

	<echo message="Combining ${_combined-file_}"/>

	<!-- create a "location" for portability -->
	<property name="__from-dir-loc__"
		location="${_to-dir_}"/>
	<pathconvert property="__files-to-combine__" pathsep=",">
	    <fileset dir="${__from-dir-loc__}">
		<patternset refid="${_pattern-set_}"/>
	    </fileset>
	    <mapper type="glob" 
		from="${__from-dir-loc__}${file.separator}*" to="*"/>
	</pathconvert>

	<java jar="${tools.jar}" failonerror="true" fork="true">
	  <arg value="-combineJS"/>
	  <arg value="-sourceDir"/>
	  <arg value="${__from-dir-loc__}"/>
	  <arg value="-fileList"/>
	  <arg value="${__files-to-combine__}"/>
	  <arg value="-modulePrefix"/>
	  <arg value="${theme.js-module-prefix}"/>
	  <arg value="-outFile"/>
	  <arg value="${_combined-file_}"/>
	  <arg value="-verbose"/>
	</java>

        <!-- Add copyright to combined file -->
        <replaceregexp match="^" byline="false" replace="${copyright}"> 
            <fileset file="${_combined-file_}"/>
        </replaceregexp>

    </target>

    <!-- Set the compressed-js-uptodate property if
	"${_to-dir_}/**/*.js" files are newer than 
	"${_from-dir_}/**/*.js"
    -->
    <target name="compressed-js-uptodate">
	<uptodate property="compressed-js-uptodate">
	    <srcfiles dir="${_from-dir_}" 
		includes="**/*.js"
		excludes="theme/nls/,**/${theme.webui.js},**/${theme.webui-all.js},**/${theme.webui-jsfx.js},**/${theme.webui-jsfx-all.js}"/>
	    <mapper type="glob" from="*" to="${_to-dir_}/*"/>
	</uptodate>
    </target>

    <!-- Parameters

	_to-dir_ - root of the destination for combined files
	_from-dir_ - the source of the javascipt files.

        Comment out build-compressJS in the build.properties file if you
        don't want to compress when modifying JavaScript files

	To simplify the dependency checking it is expected that
	there are files in "${_from-dir_}", so either "combineJavascript"
	or "copyJavascript" should have been called.

	Expects Global "${rhino.jar}" to be set.
    -->
    <target name="compressJavascript" if="build-compressJS" 
            depends="compressed-js-uptodate" unless="compressed-js-uptodate">

	<mkdir dir="${_to-dir_}"/>

	<!-- Use property location to overcome issues with
	     Windows paths and pathconvert.
	-->
	<property name="__from-dir-loc__" location="${_from-dir_}"/>
	<property name="__to-dir-loc__" location="${_to-dir_}"/>

	<!-- make sure to exclude the "nls" directory -->
	<pathconvert property="__files-to-compress__" pathsep=",">
	    <fileset dir="${__from-dir-loc__}">
		<exclude name="**/nls/"/>
		<depend targetdir="${__to-dir-loc__}">
		    <mapper type="glob" from="*" to="*"/>
		</depend>
	    </fileset>
	    <mapper type="glob" 
		from="${__from-dir-loc__}${file.separator}*" to="*"/>
	</pathconvert>

	<!-- Always add "webui.js" since it is always a generated file -->
	<java jar="${tools.jar}" failonerror="true" fork="true">
	  <arg value="-compressJS"/>
	  <arg value="-sourceDir"/>
	  <arg value="${__from-dir-loc__}"/>
	  <arg value="-destDir"/>
	  <arg value="${__to-dir-loc__}"/>
	  <arg value="-fileList"/>
	  <arg value="${__files-to-compress__}"/>
	  <arg value="-rhinoJar"/>
	  <arg value="${rhino.jar}"/>
	  <arg value="-verbose"/>
	</java>

        <!-- Add copyrights stripped by compression tool -->
        <replaceregexp match="^" byline="false" replace="${copyright}"> 
            <fileset dir="${__to-dir-loc__}"
		includes="${__files-to-compress__}"/>
        </replaceregexp>

    </target>

    <target name="buildJsTheme"
	description="Build Javascript theme files.">

	<!-- See build-js-theme.xml for parameters to its target -->
        <!-- call build-js-theme.xml to build the javascript theme -->
        <ant antfile="build-js-theme.xml" 
	    target="buildJsTheme" inheritAll="false">
	    <property name="_js-to-dir_" value="${theme.build-dir}"/>
	    <property name="_js-theme-name_" value="${theme.name}"/>
	    <property name="_js-webui-jar_" value="${webui.jar}"/>
	    <property name="_js-theme-jar_" value="${theme.jar}"/>
	    <property name="_js-theme-package_" value="${theme.package}"/>
	 </ant>
    </target>

    <!-- Set the jsdoc-uptodate property if
	"${_to-dir_}/index.html" is newer than "${_from-dir_}/**/*.js"
    -->
    <target name="jsdoc-uptodate">
	<uptodate property="jsdoc-uptodate">
	    <srcfiles dir="${theme.build-package-path}/javascript_uncompressed"
		includes="**/*.js"
		excludes="theme/nls/,**/${theme.webui.js},**/${theme.webui-all.js},**/${theme.webui-jsfx.js},**/${theme.webui-jsfx-all.js}"/>
	    <mergemapper to="${jsdocs}/index.html"/>
	</uptodate>
    </target>

    <!-- Parameters

        Comment out build-jsdoc in the build.properties file if you
        don't want jsDoc to build when modifying JavaScript files

	To simplify the dependency checking it is expected that
	there are files in "${_from-dir_}", so either "combineJavascript"
	or "copyJavascript" should have been called.

	Expects Global "${rhino.jar}" to be set.
    -->
    <target name="jsdoc" if="build-jsdoc" depends="jsdoc-uptodate"
	    unless="jsdoc-uptodate">

	<property name="_to-dir_" value="${jsdocs}"/>
	<property name="_from-dir_" 
		value="${theme.build-package-path}/javascript_uncompressed"/>

	<mkdir dir="${_to-dir_}"/>

	<!-- Use property location to overcome issues with
	     Windows paths and pathconvert.
	-->
	<property name="__from-dir-loc__" location="${_from-dir_}"/>
	<property name="__to-dir-loc__" location="${_to-dir_}"/>

	<!-- make sure to exclude the "nls" directory -->
	<pathconvert property="__files-to-doc__" pathsep=" ">
	    <fileset dir="${__from-dir-loc__}">
		<exclude name="**/nls/"/>
                <exclude name="${theme.webui.js}"/>
                <exclude name="${theme.webui-all.js}"/>
                <exclude name="${theme.webui-jsfx.js}"/>
                <exclude name="${theme.webui-jsfx-all.js}"/>
		<depend targetdir="${__to-dir-loc__}">
		    <mapper type="glob" from="*" to="*"/>
		</depend>
	    </fileset>
	    <mapper type="glob" from="*" to="*"/>
	</pathconvert>

	<!-- Always add "webui.js" since it is always a generated file -->
	<java jar="${rhino.jar}" failonerror="true" fork="true">
          <sysproperty key="jsdoc.dir" value="${jsdoc.dir}"/>
          <arg value="${jsdoc.exec}"/>
	  <arg value="-d=${_to-dir_}"/>
	  <arg value="-t=${jsdoc.template}"/>
          <arg line="${__files-to-doc__}"/>
	</java>

        <!-- JsDoc doesn't link source files correctly for subdirectories,
             so we'll just remove them for now. 
        -->
        <delete>
            <fileset dir="${_to-dir_}" includes="**/*.src.html"/>
        </delete>
    </target>

    <!-- ################ theme service targets ################# -->

    <!-- Parameters defined in compile-theme-service
	_cmpl-java-src_
	_cmpl-dest-dir_
	_cmpl-serice-class_
    -->
    <target name="theme-service-uptodate">
        <uptodate property="theme-service-uptodate"
	  srcfile="${_cmpl-java-src_}/${_cmpl-service-class_}.java"
	  targetfile="${_cmpl-java-src_}/${_cmpl-service-class_}.class"/>
    </target>

    <!-- Parameters

	_cmpl-java-src_
	_cmpl-dest-dir_
	_cmpl-service-class_

	Expects Global ${debug}, and ${webui.jar}
    -->
    <target name="compile-theme-service"
            unless="theme-service-uptodate"
	    depends="theme-service-uptodate">
        
        <javac srcdir="${_cmpl-java-src_}" 
               destdir="${_cmpl-dest-dir_}" deprecation="false"
               debug="${debug}"
               optimize="${debug}"
               source="1.5" target="1.5">
            <compilerarg line="-Xmaxwarns 1000"/>
            <classpath>
                <pathelement path="${webui.jar}"/>
            </classpath>
        </javac>
        
    </target>

    <!-- Parameters

	See "theme.*" clone properties.

	Javascript files are always copied when creating a clone.
	Unless there are special requirements for the ThemeService properties
	file and ThemeService implementation do not set the
	_clone-service-properties-template_ and _clone-service-class-template_.
	They will default to META-INF/services/suntheme.properties and
	META-INF/services/SunthemeThemeService.java.

	Once the theme is cloned, you can build it as necessary.
	But the properties used to clone the theme must be in effect.
    -->

    <target name="cloneTheme">
	<!-- Fail if the clone already exists -->
	<fail message="A theme clone named src/${theme.name} already exists you must manually delete it to create one of that name.">

	    <condition>
		<or>
		    <and>
			<available property="__clone-exists__" type="dir"
				file="${theme.clone-dir}/${theme.name}"/>
			<isset property="${theme.clone-overwrite}"/>
			<isfalse value="${theme.clone-overwrite}"/>
		    </and>
		    <and>
			<available property="__clone-exists__" type="dir"
				file="${theme.clone-dir}/${theme.name}"/>
			<not>
			    <isset property="${theme.clone-overwrite}"/>
			</not>
		    </and>
		</or>
	    </condition>
	</fail>

        <echo message="Cloning Theme ${theme.name} from ${theme.clone-src-dir}"/>
        
	<condition property="__clone-filter__"
		value="${theme.filter}" else="false">
	    <isset property="theme.clone-filter"/>
	</condition>

	<!-- For the default cloning we will not filter and not
	     overwrite. Not filtering allows diff's with the source
	     of the clone. We will also create a parallel tree
	     under src without the "build" package path. -->

        <antcall target="_copyThemeFiles-internal_">
	    <param name="_to-dir_" value="${theme.clone-dir}" />
	    <param name="_from-dir_" value="${theme.clone-src-dir}" />
	    <param name="_filter_" value="${__clone-filter__}"/>
	    <param name="_copy-javascript_" value="true"/>
	    <param name="_fail-on-error_" value="true"/>
        </antcall>


        <antcall target="_copyThemeService-internal_">
	    <param name="_to-dir_" 
		value="${theme.clone-dir}/${theme.package-path}" />
	    <param name="_filter_" value="${__clone-filter__}"/>
        </antcall>
        
    </target> 

    <!-- TARGETS FOR INTERNAL USE ONLY -->

    <!--  Copies themes files from

	${_from-dir_}/messages		${_to-dir_}/messages
	${_from-dir_}/properties   to	${_to-dir_}/properties
	${_from-dir_}/templates		${_to-dir_}/templates
    	${_from-dir_}/images		${_to-dir_}/images
	${_from-dir_}/css		${_to-dir_}/css

	Javascript files are conditionally copied

	${_from-dir_}/javascript	to	${_to-dir_}/javascript

	if ${_copy-javascript_} is true.

	Use this target to clone or copy files to a build location.
	If "${_filter_}" is true filtering happens on the copy.
	Otherwise files are copied as is. For cloning it should be
	set to false.
    
	Parameters

	_to-dir__ - The destination directory
	_from-dir__ - The root of the source files to copy
	_filter__ - If "true" then files are filtered as they are copied,
		   if "false" or not set, then files are just copied.
	_copy-javascript_ - If "true" javascript files are copied as is. If
		       false javascript files are not copied. This is 
		       accommodate cloning and building. When cloning
		       _copy-javascript_ should be true, and false when 
		       building.
	_fail-on-error_ - passed to the copy task's "failonerror"
			     attribute.
    -->
    <target name="_copyThemeFiles-internal_">

        <mkdir dir="${_to-dir_}" />

	<!-- images and messages can be copied as is -->

        <copy todir="${_to-dir_}/images"
		failonerror="${_fail-on-error_}">
            <fileset dir="${_from-dir_}/images">
                <exclude name="**/CVS/**" /> 
            </fileset>
        </copy>

	<copy todir="${_to-dir_}/messages"
		failonerror="${_fail-on-error_}">
	    <fileset dir="${_from-dir_}/messages">
		<exclude name="**/CVS/**" /> 
	    </fileset>
	</copy>

	<!-- templates, css files, styles, stylesheet, properties files
	     must be filtered if ${_filter_} is true.
	     -->
	<filterset id="_css-name-filter_">
	    <filter token="THEME_CSS" value="${theme.css-name}"/>
	</filterset>

	<condition property="__css-name-filter__"
		value="_css-name-filter_" else="null-filter">
	    <istrue value="${_filter_}"/>
	</condition>

        <copy todir="${_to-dir_}/templates"
		failonerror="${_fail-on-error_}">
	    <fileset dir="${_from-dir_}/templates">
		<exclude name="**/CVS/**" /> 
	    </fileset>
            <filterset refid="${__css-name-filter__}"/>
        </copy>

        <copy todir="${_to-dir_}/css"
		failonerror="${_fail-on-error_}">
            <fileset dir="${_from-dir_}/css">
                <exclude name="**/CVS/**" /> 
            </fileset>
            <filterset refid="${__css-name-filter__}"/>
        </copy>

	<filterset id="_theme-filter_">
	    <filter token="THEME" value="${theme.name}"/>
	    <filter token="THEME_PATH" value="/${theme.package-path}"/>
	</filterset>

	<condition property="__theme-filter__"
		value="_theme-filter_" else="null-filter">
	    <istrue value="${_filter_}"/>
	</condition>

        <copy todir="${_to-dir_}/properties"
		failonerror="${_fail-on-error_}">
            <fileset dir="${_from-dir_}/properties">
                <include name="*.properties" />
            </fileset>
            <filterset refid="${__theme-filter__}"/>
            <filterset refid="${__css-name-filter__}"/>
        </copy>

	<!-- the null fileset 
	  It must have a "dir" so exclude all files
	-->
	<fileset id="null-fileset" dir="${_from-dir_}/javascript">
	    <exclude name="**/CVS/**" />
	    <exclude name="**/*.js" />
	    <exclude name="*.js" />
	</fileset>

	<fileset id="_js-fileset_" dir="${_from-dir_}/javascript">
	    <exclude name="**/CVS/**" />
	</fileset>

	<condition property="__js-fileset__"
		value="_js-fileset_" else="null-fileset">
	    <istrue value="${_copy-javascript_}"/>
	</condition>

	<copy todir="${_to-dir_}/javascript"
		failonerror="${_fail-on-error_}">
            <fileset refid="${__js-fileset__}"/>
            <filterset refid="${__theme-filter__}"/>
	</copy>

    </target>

    <!-- Set "${theme-service-templates-uptodate}" if the template file
	 and the service java file is up to date

	 _to-dir_

	 is a parameter to _copyThemeService-internal_ or defined
	 in that target.
    -->
    <target name="theme-service-templates-uptodate">
	<uptodate property="props"
	     srcfile="${theme.service-properties-template}"
	     targetfile="${_to-dir_}/${theme.name}.properties"/>
	<uptodate property="javafile"
	     srcfile="${theme.service-class-template}"
	     targetfile="${_to-dir_}${theme.service-class}.java"/>
	<condition property="theme-service-templates-uptodate">
	    <and>
	       <isset property="props"/>
	       <isset property="javafile"/>
	    </and>
	</condition>
    </target>

    <!--
	Use this target to clone or copy theme service
	files to a build location.
	If "${_filter_}" is true filtering happens on the copy.
	Otherwise files are copied as is. For cloning it should be
	set to false.
    
	Parameters

	_to-dir__ - The destination directory
	_filter__ - If "true" then files are filtered as they are copied,
		   if "false" or not set, then files are just copied.

	Service files are copied as

	${theme.service-class-template} to
	  ${_to-dir_}/${theme.package-path}/${theme.service-class}.java
	${theme.service-properties-template} to
	  ${_to-dir_}/${theme-package-path}/${theme.name}.properties

	If "${theme.service-class-template}" or 
	${theme.service-properties-template} does not exist
	${basedir}/META-INF/services/SunthemeThemeService.java" and
	${basedir}/META-INF/services/suntheme.properties"> are copied
	respectively.

    -->
    <target name="_copyThemeService-internal_"
		depends="theme-service-templates-uptodate"
		unless="theme-service-templates-uptodate">

        <mkdir dir="${_to-dir_}" />

	<!-- ThemeService java class file and properties file
	     are derived from templates, and must be filtered
	     if ${_filter_} is true.
	     -->

	<!-- Filtersets for copying the theme service files -->
	<filterset id="_theme-service-filter_">
	    <filter token="THEME" value="${theme.name}"/>
	    <filter token="THEME_VERSION" value="${theme.version}"/>
	    <filter token="THEME_PACKAGE" value="${theme.package}"/>
	    <filter token="THEME_SERVICE_CLASS" value="${theme.service-class}"/>
	</filterset>

	<condition property="__servicefilter__"
		value="_theme-service-filter_" else="null-filter">
	    <istrue value="${_filter_}"/>
	</condition>

	<!-- filter out the package path if it exists in _to-dir_ -->
	<!--
	<property name="_to-dir-pkg-path_"
	    location="${_to-dir_}/${theme.package-path}"/>

	<condition property="__to-dir__"
	    value="${_to-dir_}" 
		else="${_to-dir-pkg-path_}">
	    <contains string="${_to-dir_}" 
		substring="${theme.package-path}"/>
	</condition>
	-->

	<!-- set the default ThemeService templates -->
	<condition property="_service-class-template_"
		value="${theme.service-class-template}"
		else="${basedir}/META-INF/services/SunthemeThemeService.java">
	    <available property="_have-class-template_" type="file"
		    file="${theme.service-class-template}"/>
	</condition>
	<condition property="_service-properties-template_"
		value="${theme.service-properties-template}"
		else="${basedir}/META-INF/services/suntheme.properties">
	    <available property="_have-properties-template_" type="file"
		file="${theme.service-properties-template}"/>
	</condition>

	<condition property="_prop-copy-warning_"
		value="Warning: copying ${_service-properties-template_}"
		else ="">
	    <istrue value="${_have-properties-template_}"/>
	</condition>
	<condition property="_class-copy-warning_"
		value="Warning: copying ${_service-class-template_}"
		else ="">
	    <istrue value="${_have-class-template_}"/>
	</condition>
	<echo message="${_class-copy-warning_}" level="debug"/>
	<echo message="${_prop-copy-warning_}" level="debug"/>

        <!-- create the SPI theme properties files from template-->
        <copy file="${_service-properties-template_}"
	   tofile="${_to-dir_}/${theme.name}.properties">
            <filterset refid="${__servicefilter__}"/>
        </copy>
        
        <!-- Create the SPI Theme Service java file 
	     And always filter the tokens -->
        <copy file="${_service-class-template_}"
	    tofile="${_to-dir_}/${theme.service-class}.java">
            <filterset refid="_theme-service-filter_"/>
        </copy> 

    </target>

    <!-- If the combinedImage file is newer than any image file and
	 the images.properties file, set "images-uptodate".
    -->
    <target name="images-uptodate">
	 <uptodate property="images-uptodate">
	    <srcfiles dir="${theme.src-dir}"
		includes="images/**/*,properties/images.properties"/>
	    <mergemapper 
	    to="${theme.build-package-path}/images/other/${theme.combined-image}"/>
	 </uptodate>
    </target>

    <target name="combineImages" if="build-combineImages"
	    depends="images-uptodate" unless="images-uptodate" 
	    description="Combine images.">

	<java jar="${tools.jar}" failonerror="true" fork="true">
	  <arg value="-combineImages"/>
	  <arg value="-sourceDir"/>
	  <arg value="${theme.build-dir}"/>
	  <arg value="-imageFile"/>
	  <arg value="${theme.build-package-path}/images/other/${theme.combined-image}"/>
	  <arg value="-imagePropertyFile"/>
	  <arg value="${theme.build-package-path}/properties/images.properties"/>
	  <arg value="-outFile"/>
	  <arg value="${theme.build-package-path}/properties/images.properties"/>
	</java>

    </target>

    <!-- the null filterset -->
    <filterset id="null-filter"/>

    <!-- noop target -->
    <target name="noop"/>

    <target name="clean">
        <delete dir="${build}" />
        <delete dir="${dist}" />
	<delete dir="${theme.build-dir}"/>
	<delete file="${theme.jar}"/>
        <delete dir="${jsdocs}" />
    </target>

</project>
