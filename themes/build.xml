<?xml version='1.0' encoding='ISO-8859-1' ?>
<!--
 The contents of this file are subject to the terms
 of the Common Development and Distribution License
 (the License).  You may not use this file except in
 compliance with the License.
 
 You can obtain a copy of the license at
 https://woodstock.dev.java.net/public/CDDLv1.0.html.
 See the License for the specific language governing
 permissions and limitations under the License.
 
 When distributing Covered Code, include this CDDL
 Header Notice in each file and include the License file
 at https://woodstock.dev.java.net/public/CDDLv1.0.html.
 If applicable, add the following below the CDDL Header,
 with the fields enclosed by brackets [] replaced by
 you own identifying information:
 "Portions Copyrighted [year] [name of copyright owner]"
 
 Copyright 2007 Sun Microsystems, Inc. All rights reserved.
-->

<project name="themes" default="all" basedir=".">
    
    <tstamp>
        <format property="BuildNumber" pattern="yyyyMMddHHmm"/>
    </tstamp>
    
    <property file="../build.properties"/>
    <property file="build.properties"/>

    <condition property="theme.name" value="${theme.name}" else="suntheme">
	<isset property="theme.name"/>
    </condition>

    <!-- load theme properties files if they exist -->

    <property file="../${theme.name}.properties"/>
    <property file="${theme.name}.properties"/>
    
    <!-- default directories -->
    <property name="dist" value="./dist"/>
    <property name="doc" value="./doc"/>
    <property name="build" value="./build"/>
    <property name="src" value="./src"/>
    <property name="tools" value="${basedir}/../tools"/>
    <property name="l10n" value="./l10n"/>
    
    <!-- Building a theme now depends on webui-jsf.jar 
         In the future it will depend on just the theme implementation
	 jar, but for now the SPI ThemeService 
	 SunthemeThemeService implementation
	 relies on com.sun.webui.theme.ThemeService which is in
	 webui-jsf.jar -->

    <property name="webui.jar"
              value="${components.home}/lib/webui-jsf.jar"/>
    <property name="tools.jar"
              value="${tools}/lib/woodstock-tools.jar"/>
    <property name="rhino.jar"
              value="${tools}/lib/custom_rhino.jar"/>

    <property name="master.css"
              value="css_master.css"/>
    <property name="master-all.css"
              value="css_master-all.css"/>
    <property name="webui.js"
              value="webui.js"/>
    <property name="module.prefix"
              value="webui.${theme.name}"/>

    <loadfile property="copyright" srcFile="${doc}/copyright.txt"/>
    <loadfile property="copyright-css" srcFile="${doc}/copyright-css.txt"/>

    <!-- ========== all ========== -->
    <!-- This creates the theme jars for component distribution. -->
    <target name="all" depends="buildTheme,buildJsTheme" />

    <!-- Default values. This build file will always build a "suntheme"
	 if no ${theme.name} property or ${theme.name}.properties
	 files are defined -->
    
    <property name="theme.name" value="suntheme"/>
    <property name="theme.src-dir" value="${src}/${theme.name}"/>
    <property name="theme.package"  value="com.sun.webui.jsf.suntheme"/>
    <property name="theme.build-dir" value="${build}/${theme.name}"/>
    <property name="theme.l10n-dir" value="${l10n}"/>
    <property name="theme.jar" value="dist/webui-jsf-suntheme.jar"/>
    <property name="theme.version" value="4.1"/>
    <property name="theme.css-name" value="_sun4"/>
    <property name="theme.service-class" value="SunthemeThemeService"/>
    <property name="theme.service-class-template"
	value="${theme.src-dir}/com/sun/webui/jsf/suntheme/${theme.service-class}.java"/>    
    <property name="theme.service-properties-template"
	value="${theme.src-dir}/com/sun/webui/jsf/suntheme/${theme.name}.properties"/>
    <!-- Targets -->

    <!-- Parameters
    -->
    <target name="buildTheme" description="Build a theme jar.">
        
        <echo message="Building the ${theme.name} Theme" /> 

        <antcall target="_buildTheme_">
            <param name="_bld-theme-name_" value="${theme.name}"/>
            <param name="_bld-from-dir_" value="${theme.src-dir}"/>
            <param name="_bld-to-dir_" value="${theme.build-dir}"/>
            <param name="_bld-theme-jar_" value="${theme.jar}"/>
            <param name="_bld-theme-version_" value="${theme.version}"/>
            <param name="_bld-theme-package_"
		value="${theme.package}"/>
            <param name="_bld-css-name_" value="${theme.css-name}"/>
            <param name="_bld-service-class_"
                   value="${theme.service-class}"/>
            <param name="_bld-service-class-template_"
		value="${theme.service-class-template}"/>
            <param name="_bld-service-properties-template_" 
                   value="${theme.service-properties-template}"/>
        </antcall>

    </target> 
    
    <!-- See build-js-theme.xml for parameters to its target -->

    <target name="buildJsTheme"
	description="Build Javascript theme files.">

        <!-- call build-js-theme.xml to build the javascript theme -->
        <ant antfile="build-js-theme.xml" 
	    target="buildJsTheme" inheritAll="false">
	    <property name="_js-to-dir_" value="${theme.build-dir}"/>
	    <property name="_js-theme-name_" value="${theme.name}"/>
	    <property name="_js-webui-jar_" value="${webui.jar}"/>
	    <property name="_js-theme-jar_" value="${theme.jar}"/>
	    <property name="_js-theme-package_" value="${theme.package}"/>
	    <property name="_js-l10n-dir_" value="${theme.l10n-dir}"/>
	 </ant>

    </target>

    <target name="cloneTheme" description="Clone the theme sources.">

	<condition property="__overwrite__">
	    <isset property="${theme.clone-overwrite}"/>
	</condition>

	<antcall target="_cloneTheme_">
	    <param name="_clone-to-dir_" value="${theme.clone-dir}" />
	    <param name="_clone-from-dir_" value="${theme.clone-src-dir}" />

            <param name="_clone-theme-name_" value="${theme.name}"/>
	    <param name="_clone-theme-version_" value="${theme,version_}"/>
	    <param name="_clone-theme-package_" value="${theme.package}"/>
	    <param name="_clone-css-name_" value="${theme.css-name}"/>

	    <param name="_clone-service-class_" value="${theme.service-class}"/>
	    <!--
	    <param name="_clone-service-class-template_" 
		value="${theme.service-class-template}"/>
	    <param name="_clone-service-properties-template_"
		value="${theme.service-properties-template}"/>
	    -->
	    <param name="_clone-filter_" value="${theme.clone-filter}"/>
	    <param name="_clone-overwrite_" value="${__overwrite__}"/>
	    <param name="_clone-javascript_" value="true"/>

        </antcall>
    </target>

    <!-- General targets -->
    
    <!-- Parameters

	 Gloable values are obtained for MANIFEST.MF for

	    FullVersion
	    Version
	    ThemeVersion
	    BuildNumber

	_bld-to-dir_ - The destination directory
	_bld-from-dir_ - The root of the source files to copy and build
	_bld-theme-name_ - The theme name
	_bld-theme-version_ - The theme version for ThemeService impl,
			      must be "<major>.<minor>" where "major" and
			      "<minor>" are integers.
	_bld-theme-package_ - Them theme package name.
	_bld-css-name_ - A "unique" suffix added to selectors to differentiate
		         this theme's selectors from others.
	_bld-service-class_ - The ThemeService class name.
	_bld-service-class-template_ - The ThemeService implementation java 
				       class template file 
	_bld-service-properties-template_ - The ThemeService properties file
					    template.
    -->

    <target name="_buildTheme_">

	<!-- Windows unpackagemapper does not behave the same when there is a
	     dot in the basedir path like woodstock-build-4.1
	     therefore we have to create a "unpackage" version of the
	     basedir and then "map" it out -->

	<!-- make basedir a package -->
	<pathconvert  property="__bld-basedir-pkg__">
	    <path path="${basedir}"/>
	    <unpackagemapper from="*" to="*"/>
        </pathconvert>

	<!-- convert the package into a file path
	     and map out the basedir package -->
	<pathconvert property="__bld-pkgpath__">
	    <path path="${_bld-theme-package_}"/>
	    <unpackagemapper from="*" to="*"/>
	    <map from="${__bld-basedir-pkg__}/" to=""/>
	</pathconvert>

	<!-- shorten a freqently used properties sequence -->
	<property name="__bld-to-pkgpath__" 
	    value="${_bld-to-dir_}/${__bld-pkgpath__}"/>
	<property name="__bld-from-pkgpath__" 
	    value="${_bld-from-dir_}/${__bld-pkgpath__}"/>

        <mkdir dir="${__bld-to-pkgpath__}" />

	<!-- copy and substitute params from the "src" to the "build" dir -->
        <antcall target="_copyThemeFiles_">

	    <!-- when building files are copied to the full package path -->
	    <param name="_cp-to-dir_" value="${__bld-to-pkgpath__}"/>
	    <param name="_cp-from-dir_" value="${_bld-from-dir_}"/>
            <param name="_cp-theme-name_" value="${_bld-theme-name_}"/>
	    <param name="_cp-theme-version_" value="${_bld-theme-version_}"/>
	    <param name="_cp-theme-package_" 
		value="${_bld-theme-package_}"/>
	    <param name="_cp-css-name_" value="${_bld-css-name_}"/>
	    <param name="_cp-service-class_" value="${_bld-service-class_}"/>
	    <param name="_cp-service-class-template_"
		value="${_bld-service-class-template_}"/>
	    <param name="_cp-service-properties-template_"
		value="${_bld-service-properties-template_}"/>
	    <param name="_cp-filter_" value="true"/>
	    <!-- we copy during js compression -->
	    <param name="_cp-javascript_" value="false"/>

        </antcall>

        <!-- copy messages.properties to messages_en.properties JSF hack -->
        <copy file="${_bld-from-dir_}/messages/messages.properties"
              tofile="${__bld-to-pkgpath__}/messages/messages_en.properties"/>
        
        <copy todir="${_bld-to-dir_}/META-INF">
            <fileset dir="META-INF">
                <include name="manifest.mf" /> 
                <include name="services/com.sun.webui.theme.ThemeService" /> 
            </fileset>
            <filterset>
                <filter token="DATESTAMP" value="${BuildNumber}"/>
                <filter token="THEME" value="${_bld-theme-name_}"/>
                <filter token="FULL_VERSION" value="${FullVersion}"/>
                <filter token="VERSION" value="${Version}"/>
                <filter token="THEME_VERSION" value="${_bld-theme-version_}"/>
                <filter token="THEME_PACKAGE" value="${_bld-theme-package_}"/>
                <filter token="THEME_SERVICE_CLASS"
			value="${_bld-service-class_}"/>
            </filterset>
        </copy>

        <!-- Compile the Theme Service class-->
        <antcall target="compile-theme-service">
            <param name="_cmpl-java-src_" value="${__bld-to-pkgpath__}"/>
            <param name="_cmpl-dest-dir_" value="${_bld-to-dir_}"/>
            <param name="_cmpl-service-class_" value="${_bld-service-class_}"/>
        </antcall>
        
        <!-- Delete the service java file from the build dir -->
        <delete file="${__bld-to-pkgpath__}/${_bld-service-class_}.java"/>

        <!-- Combine and compress CSS -->
        <antcall target="combineCSS">
	    <param name="_cmp-to-dir_" value="${_bld-to-dir_}"/>
	    <param name="_cmp-from-dir_" value="${_bld-from-dir_}"/>
	    <param name="_cmp-to-pkgpath_" value="${__bld-to-pkgpath__}"/>
            <param name="_cmp-theme-name_" value="${_bld-theme-name_}"/>
            <param name="_cmp-css-name_" value="${_bld-css-name_}"/>
	    <param name="_cmp-theme-version_" value="${_bld-theme-version_}"/>
	</antcall>

        <!-- Combine and compress JavaScript -->
        <antcall target="compressJavascript">
	    <param name="_cmp-to-dir_" value="${_bld-to-dir_}"/>
	    <param name="_cmp-from-dir_" value="${_bld-from-dir_}"/>
	    <param name="_cmp-to-pkgpath_" value="${__bld-to-pkgpath__}"/>
            <param name="_cmp-theme-name_" value="${_bld-theme-name_}"/>
            <param name="_cmp-css-name_" value="${_bld-css-name_}"/>
	    <param name="_cmp-theme-version_" value="${_bld-theme-version_}"/>
	</antcall>
        
        <!-- Create the theme jar -->
	<dirname property="__distdir__" file="${_bld-theme-jar_}"/>
        <mkdir dir="${__distdir__}" />
        <jar destfile="${_bld-theme-jar_}"
             basedir="${_bld-to-dir_}"
             manifest="${_bld-to-dir_}/META-INF/manifest.mf">
        </jar>

    </target> 

    <!-- Parameters

	_cmp-to-dir_
	_cmp-from-dir_
	_cmp-css-name_
	_cmp-theme-name_
	_cmp-theme-version_

	Expects Global "${master.css}" to be set.

	-->
    <target name="combineCSS">

	<!-- Do this before copying to temp dir. We don't want to mix theme 
             nls files with the compressed file due to compression errors.
        -->
	<delete dir="${_cmp-to-dir_}/css_tmp"/>
	<mkdir dir="${_cmp-to-dir_}/css_tmp"/>

	<!-- Get the out of date files into the temporary dir -->
	<copy todir="${_cmp-to-dir_}/css_tmp">
	    <fileset dir="${_cmp-from-dir_}/css">
              <exclude name="**/CVS/**" />
	    </fileset>
            <filterset>
                <filter token="THEME_CSS" value="${_cmp-css-name_}"/>
            </filterset>
	</copy>

	<java jar="${tools.jar}" failonerror="true" fork="true">
	  <arg value="-combineCSS"/>
	  <arg value="-sourcePath"/>
	  <arg value="${_cmp-to-dir_}/css_tmp/${master.css}"/>
	  <arg value="-modulePath"/>
	  <arg value="${_cmp-to-dir_}/css_tmp"/>
	  <arg value="-combinedFile"/>
	  <arg value="${_cmp-to-dir_}/css_tmp/${master-all.css}"/>
	  <arg value="-verbose"/>
	</java>

        <!-- Add copyright to combined file -->
        <replaceregexp match="^" byline="false" replace="${copyright-css}"> 
            <fileset file="${_cmp-to-dir_}/css_tmp/${master-all.css}"/>
        </replaceregexp>

	<!-- Copy files to the "uncompressed" directory -->
	<copy todir="${_cmp-to-pkgpath_}/css">
	    <fileset dir="${_cmp-to-dir_}/css_tmp"/>
	</copy>

        <delete dir="${_cmp-to-dir_}/css_tmp"/>
    </target>

    <!-- Parameters

	_cmp-to-dir_
	_cmp-from-dir_
	_cmp-css-name_
	_cmp-theme-name_
	_cmp-theme-version_

	Expects Global "${webui.js}" to be set.

	-->
    <target name="combineJavascript" depends="javascriptUpToDate"
            unless="javascriptUpToDate">

	<!-- Do this before copying to temp dir. We don't want to mix theme 
             nls files with the compressed file due to compression errors.
        -->
	<delete dir="${_cmp-to-dir_}/javascript_tmp"/>
	<mkdir dir="${_cmp-to-dir_}/javascript_tmp"/>

	<!-- Get the out of date files into the temporary dir -->
	<copy todir="${_cmp-to-dir_}/javascript_tmp">
	    <fileset dir="${_cmp-from-dir_}/javascript">
              <exclude name="**/CVS/**" />
              <!-- Keep overall size small by excluding least used files -->
<!--
              <exclude name="addRemove.js" />
              <exclude name="commonTasksSection.js" />
              <exclude name="editableList.js" />
              <exclude name="fileChooser.js" />
              <exclude name="orderableList.js" />
              <exclude name="scheduler.js" />
              <exclude name="table.js" />
              <exclude name="tree.js" />
              <exclude name="wizard.js" />
-->
	    </fileset>
            <filterset>
                <filter token="THEME" value="${_cmp-theme-name_}"/> 
                <filter token="THEME_CSS" value="${_cmp-css-name_}"/>
		<filter token="THEME_VERSION" value="${_cmp-theme-version_}"/> 
            </filterset>
	</copy>

	<java jar="${tools.jar}" failonerror="true" fork="true">
	  <arg value="-combineJS"/>
	  <arg value="-sourcePath"/>
	  <arg value="${_cmp-to-dir_}/javascript_tmp"/>
	  <arg value="-modulePrefix"/>
	  <arg value="${module.prefix}"/>
	  <arg value="-modulePath"/>
	  <arg value="${_cmp-to-dir_}/javascript_tmp"/>
	  <arg value="-combinedFile"/>
	  <arg value="${_cmp-to-dir_}/javascript_tmp/${webui.js}"/>
	  <arg value="-verbose"/>
	</java>

        <!-- Add copyright to combined file -->
        <replaceregexp match="^" byline="false" replace="${copyright}"> 
            <fileset file="${_cmp-to-dir_}/javascript_tmp/${webui.js}"/>
        </replaceregexp>

	<!-- Copy files to the "uncompressed" directory -->
	<copy todir="${_cmp-to-pkgpath_}/javascript_uncompressed">
	    <fileset dir="${_cmp-to-dir_}/javascript_tmp"/>
	</copy>
    </target>

    <!-- Parameters

	_cmp-to-dir_
	_cmp-from-dir_
        _cmp-to-pkgpath_
	_cmp-css-name_
	_cmp-theme-name_
	_cmp-theme-version_

	Expects Global "${rhino.jar}" to be set.

	-->
    <target name="compressJavascript" depends="combineJavascript"
            unless="javascriptUpToDate">

	<java jar="${tools.jar}" failonerror="true" fork="true">
	  <arg value="-compressJS"/>
	  <arg value="-sourcePath"/>
	  <arg value="${_cmp-to-dir_}/javascript_tmp"/>
	  <arg value="-rhinoJar"/>
	  <arg value="${rhino.jar}"/>
	  <arg value="-verbose"/>
	</java>

        <!-- Add copyrights stripped by compression tool -->
        <replaceregexp match="^" byline="false" replace="${copyright}"> 
            <fileset dir="${_cmp-to-dir_}/javascript_tmp"/>
        </replaceregexp>

	<!-- Copy files to the "compressed" directory -->
	<copy todir="${_cmp-to-pkgpath_}/javascript">
	    <fileset dir="${_cmp-to-dir_}/javascript_tmp"/>
	</copy>

	<delete dir="${_cmp-to-dir_}/javascript_tmp"/>
    </target>

    <!-- Parameters defined in compressJavascript 
    
	 _cmp-from-dir_
	 _cmp-to-pkgpath_
	 
	 -->
    <target name="javascriptUpToDate">
	<uptodate property="javascriptUpToDate">
	    <srcfiles dir="${_cmp-from-dir_}" includes="javascript/**/*.js"/>
	    <mapper type="regexp" from="^(.*)$$"
		to="${_cmp-to-pkgpath_}/\1"/>
	</uptodate>
    </target>

    <!-- Parameters defined in compile-theme-service

	_cmpl-java-src_
	_cmpl-dest-dir_
	_cmpl-serice-class_

	-->
    <target name="theme-service-uptodate">

        <uptodate property="theme-service-uptodate"
	  srcfile="${_cmpl-java-src_}/${_cmpl-service-class_}.java"
	  targetfile="${_cmpl-dest-dir_}/${_cmpl-service-class_}.class"/>

    </target>

    <!-- Parameters

	_cmpl-java-src_
	_cmpl-dest-dir_
	_cmpl-service-class_

	Expects Global ${debug}, and ${webui.jar}
	-->

    <target name="compile-theme-service"
            unless="theme-service-uptodate"
	    depends="theme-service-uptodate">
        
        <javac srcdir="${_cmpl-java-src_}" 
               destdir="${_cmpl-dest-dir_}" deprecation="false"
               debug="${debug}"
               optimize="${debug}"
               source="1.5" target="1.5">
            <compilerarg line="-Xmaxwarns 1000"/>
            <classpath>
                <pathelement path="${webui.jar}"/>
            </classpath>
        </javac>
        
    </target>

    <!--  Copies themes files from

	${_cp-from-dir_}/messages		${_cp-to-dir_}/messages
	${_cp-from-dir_}/properties   to	${_cp-to-dir_}/properties
	${_cp-from-dir_}/templates		${_cp-to-dir_}/templates
	${_cp-from-dir_}/images			${_cp-to-dir_}/images
	${_cp-from-dir_}/css			${_cp-to-dir_}/css

	${_cp-service-class-template_} to
	    ${_cp-to-dir_}/<theme-package-path>/${_cp-service-class_}.java
	${_cp-service-properties-template_} to
	    ${_cp-to-dir}/<theme-package-path>/${_cp-theme-name_}.properties

	Where <theme-package-path> is derived from ${_cp-theme-package_}.

	And conditionally 

	${_cp-from-dir_}/javascript	to	${_cp-to-dir_}/javascript

	if ${_cp-javascript_} is true.

	Use this target to clone or copy files to a build location.
	If "${_cp-filter_}" is true filtering happens on the copy.
	Otherwise files are copied as is. For cloning it should be
	set to false.
    
	Parameters

	_cp-to-dir_ - The destination directory
	_cp-from-dir_ - The root of the source files to copy
	_cp-theme-name_ - The theme name
	_cp-theme-version_ - The theme version for ThemeService impl,
			  must be "<major>.<minor>" where "major" and
			  "<minor>" are integers.
	_cp-theme-package_ - Theme theme package.
	_cp-css-name_ - A "unique" suffix added to selectors to differentiate
		     this theme's selectors from others.
	_cp-service-class_ - The ThemeService class name.
	_cp-service-class-template_ - The ThemeService implementation java class
				   template file 
	_cp-service-properties-template_ - The ThemeService properties file
					template.
	_cp-filter_ - If "true" then files are filtered as they are copied,
		   if "false" or not set, then files are just copied.
	_cp-javascript_ - If "true" javascript files are copied as is. If
		       false javascript files are not copied. This is 
		       accommodate cloning and building. When cloning
		       _javascript_ should be true, and false when building.
    -->
    <target name="_copyThemeFiles_">

        <mkdir dir="${_cp-to-dir_}" />

	<!-- images and messages can be copied as is -->

        <copy todir="${_cp-to-dir_}/images">
            <fileset dir="${_cp-from-dir_}/images">
                <exclude name="**/CVS/**" /> 
            </fileset>
        </copy>

        <copy todir="${_cp-to-dir_}/messages">
            <fileset dir="${_cp-from-dir_}/messages">
                <exclude name="**/CVS/**" /> 
            </fileset>
        </copy>

	<!-- templates, css files, styles, stylesheet, properties files
	     must be filtered if ${_cp-filter_} is true.
	     -->
	<filterset id="_css-name-filter_">
	    <filter token="THEME_CSS" value="${_cp-css-name_}"/>
	</filterset>

	<condition property="__css-name-filter__"
		value="_css-name-filter_" else="null-filter">
	    <istrue value="${_cp-filter_}"/>
	</condition>

        <copy todir="${_cp-to-dir_}/templates">
            <fileset dir="${_cp-from-dir_}/templates">
                <exclude name="**/CVS/**" /> 
            </fileset>
            <filterset refid="${__css-name-filter__}"/>
        </copy>

        <!-- This shall be copied via the combineCSS target
        <copy todir="${_cp-to-dir_}/css">
            <fileset dir="${_cp-from-dir_}/css">
                <exclude name="**/CVS/**" />
            </fileset>
            <filterset refid="${__css-name-filter__}"/>
        </copy>
        -->

        <copy todir="${_cp-to-dir_}/properties">
            <fileset dir="${_cp-from-dir_}/properties">
                <include name="styles.properties" /> 
            </fileset>
            <filterset refid="${__css-name-filter__}"/>
        </copy>

	<!-- Windows unpackagemapper does not behave the same when there is a
	     dot in the basedir path like woodstock-build-4.1
	     therefore we have to create an "unpackage" version of the
	     basedir and then "map" it out -->

	<!-- this version of the package path is not for the file system
	     but for the THEME_PATH filter token which is always "/" -->
	<!-- make basedir a package -->
	<pathconvert  property="__cp-theme-basedir-pkg__" dirsep="/">
	    <path path="${basedir}"/>
	    <unpackagemapper from="*" to="*"/>
        </pathconvert>

	<!-- convert the package into a theme package path -->
	<pathconvert property="__cp-theme-pkgpath__" dirsep="/">
	    <path path="${_cp-theme-package_}"/>
	    <unpackagemapper from="*" to="*"/>
	    <map from="${__cp-theme-basedir-pkg__}/" to=""/>
	</pathconvert>

	<filterset id="_theme-filter_">
	    <filter token="THEME" value="${_cp-theme-name_}"/>
	    <filter token="THEME_PATH" value="/${__cp-theme-pkgpath__}"/>
	</filterset>

	<condition property="__theme-filter__"
		value="_theme-filter_" else="null-filter">
	    <istrue value="${_cp-filter_}"/>
	</condition>

        <copy todir="${_cp-to-dir_}/properties">
            <fileset dir="${_cp-from-dir_}/properties">
                <include name="images.properties" />
                <include name="javascript.properties" />
                <include name="stylesheets.properties" />
                <include name="templates.properties" />
            </fileset>
            <filterset refid="${__theme-filter__}"/>
        </copy>

	<!-- the null fileset 
	  It must have a "dir" so exclude all files -->
	<fileset id="null-fileset" dir="${_cp-from-dir_}/javascript">
	    <exclude name="**/CVS/**" />
	    <exclude name="**/*.js" />
	    <exclude name="*.js" />
	</fileset>

	<fileset id="_js-fileset_" dir="${_cp-from-dir_}/javascript">
	    <exclude name="**/CVS/**" />
	</fileset>

	<condition property="__js-fileset__"
		value="_js-fileset_" else="null-fileset">
	    <istrue value="${_cp-javascript_}"/>
	</condition>

	<copy todir="${_cp-to-dir_}/javascript">
            <fileset refid="${__js-fileset__}"/>
            <filterset refid="${__theme-filter__}"/>
	</copy>
        
	<!-- ThemeService java class file and properties file
	     are derived from templates, and must be filtered
	     if ${_cp-filter_} is true.
	     -->

	<!-- Filtersets for copying the theme service files -->
	<filterset id="_theme-service-filter_">
	    <filter token="THEME" value="${_cp-theme-name_}"/>
	    <filter token="THEME_VERSION" value="${_cp-theme-version_}"/>
	    <filter token="THEME_PACKAGE" value="${_cp-theme-package_}"/>
	    <filter token="THEME_SERVICE_CLASS" value="${_cp-service-class_}"/>
	</filterset>

	<condition property="__servicefilter__"
		value="_theme-service-filter_" else="null-filter">
	    <istrue value="${_cp-filter_}"/>
	</condition>

	<!-- Windows unpackagemapper does not behave the same when there is a
	     dot in the basedir path like woodstock-build-4.1
	     therefore we have to create an "unpackage" version of the
	     basedir and then "map" it out -->

	<!-- this version of the package path is for the file system -->
	<!-- make basedir a package -->
	<pathconvert  property="__cp-basedir-pkg__">
	    <path path="${basedir}"/>
	    <unpackagemapper from="*" to="*"/>
        </pathconvert>

	<!-- convert the package into a theme package path -->
	<pathconvert property="__cp-pkgpath__">
	    <path path="${_cp-theme-package_}"/>
	    <unpackagemapper from="*" to="*"/>
	    <map from="${__cp-basedir-pkg__}/" to=""/>
	</pathconvert>

	<!-- filter out the package path if it exists in _cp-to-dir_ -->
	<condition property="__to-dir__"
	    value="${_cp-to-dir_}" else="${_cp-to-dir_}/${__cp-pkgpath__}">
	    <contains string="${_cp-to-dir_}" substring="${__cp-pkgpath__}"/>
	</condition>

        <!-- create the SPI theme properties files from template-->
        <copy file="${_cp-service-properties-template_}"
	   tofile="${__to-dir__}/${_cp-theme-name_}.properties">
            <filterset refid="${__servicefilter__}"/>
        </copy>
        
        <!-- Create the SPI Theme Service java file 
	     And always filter the tokens -->
        <copy file="${_cp-service-class-template_}"
	    tofile="${__to-dir__}/${_cp-service-class_}.java">
            <filterset refid="_theme-service-filter_"/>
        </copy> 

    </target>


    <!-- clone a theme ${_from-theme_} into "src/${_cp-theme-name_}"
	 It can be cloned with or without filtering, see 
	 "_copyTheme_" target.

	 Once the theme is cloned, you can build it as necessary.
	 But the properties used to clone the theme must be in effect.
     -->

    <!-- Parameters

	_clone-to-dir_ - The destination directory
	_clone-from-dir_ - The root of the source files to copy
	_clone-theme-name_ - The theme name
	_clone-version_ - The theme version for ThemeService impl,
			  must be "<major>.<minor>" where "major" and
			  "<minor>" are integers.
	_clone-theme-package_ - Them theme package name.
	_clone-css-name_ - A "unique" suffix added to selectors to 
			   differentiate this theme's selectors from others.
	_clone-service-class_ - The ThemeService class name.
	_clone-service-class-template_ - The ThemeService implementation 
					 java class template file 
	_clone-service-properties-template_ - The ThemeService properties 
					      file template.
	_clone-filter_ -  if "false" or not set, then files are just copied,
			  if "true" then files are filtered on copy.
	_clone-overwrite_ - If "true" any existing clone at
	    ${_clone-to-dir_}/${_clone-theme-name_} will be overwritten; if false
	    or unset target will fail.

	Javascript files are always copied when creating a clone.
	Unless there are special requirements for the ThemeService properties
	file and ThemeService implementation do not set the
	_clone-service-properties-template_ and _clone-service-class-template_.
	They will default to META-INF/services/suntheme.properties and
	META-INF/services/SunthemeThemeService.java.
    -->

    <target name="_cloneTheme_">

        <echo message="Cloning Theme ${_clone-theme-name_} from ${_clone-from-dir_}"/>

	<!-- Fail if the clone already exists -->
	<fail message="A theme clone named src/${_clone-theme-name_} already exists you must manually delete it to create one of that name.">

	    <condition>
		<and>
		    <available property="clone-exists" type="dir"
			file="${_clone-to-dir_}"/>
		    <isfalse value="${_clone-overwrite_}"/>
		</and>
	    </condition>

	</fail>
        
	<condition property="__cp-filter__"
		value="${_clone-filter_}" else="false">
	    <istrue value="${_clone-filter_}"/>
	</condition>

	<!-- set the default ThemeService templates -->
	<condition property="_clone-service-class-template_"
		else="META-INF/services/SunthemeThemeService.java">
	    <isset property="_clone-service-class-template_"/>
	</condition>
	<condition property="_clone-service-properties-template_"
		else="META-INF/services/suntheme.properties">
	    <isset property="_clone-service-properties-template_"/>
	</condition>

	<!-- For the default cloning we will not filter and not
	     overwrite. Not filtering allows diff's with the source
	     of the clone. We will also create a parallel tree
	     under src without the "build" package path. -->

        <antcall target="_copyThemeFiles_">

	    <param name="_cp-to-dir_" value="${_clone-to-dir_}" />
	    <param name="_cp-from-dir_" value="${_clone-from-dir_}" />

            <param name="_cp-theme-name_" value="${_clone-theme-name_}"/>
	    <param name="_cp-theme-version_" value="${_clone-version_}"/>
	    <param name="_cp-theme-package_" value="${_clone-theme-package_}"/>
	    <param name="_cp-css-name_" value="${_clone-css-name_}"/>

	    <param name="_cp-service-class_" value="${_clone-service-class_}"/>
	    <param name="_cp-service-class-template_" 
		value="${_clone-service-class-template_}"/>
	    <param name="_cp-service-properties-template_"
		value="${_clone-service-properties-template_}"/>
	    <param name="_cp-filter_" value="${__cp-filter__}"/>
	    <param name="_cp-javascript_" value="true"/>

        </antcall>
        
    </target> 

    <!-- the null filterset -->
    <filterset id="null-filter"/>

    <target name="clean">
        <delete dir="${build}" />
        <delete dir="${dist}" />
	<delete dir="${theme.build-dir}"/>
	<delete file="${theme.jar}"/>
    </target>

    <target name="syntax-check">
	<echo message="ok"/>
    </target>

</project>
