<?xml version='1.0' encoding='ISO-8859-1' ?>
<!--
 The contents of this file are subject to the terms
 of the Common Development and Distribution License
 (the License).  You may not use this file except in
 compliance with the License.
 
 You can obtain a copy of the license at
 https://woodstock.dev.java.net/public/CDDLv1.0.html.
 See the License for the specific language governing
 permissions and limitations under the License.
 
 When distributing Covered Code, include this CDDL
 Header Notice in each file and include the License file
 at https://woodstock.dev.java.net/public/CDDLv1.0.html.
 If applicable, add the following below the CDDL Header,
 with the fields enclosed by brackets [] replaced by
 you own identifying information:
 "Portions Copyrighted [year] [name of copyright owner]"
 
 Copyright 2007 Sun Microsystems, Inc. All rights reserved.
-->

<project name="themes" default="all" basedir=".">
    
    <tstamp>
        <format property="buildnumber" pattern="yyyyMMddHHmm"/>
    </tstamp>
    
    <property file="../build.properties"/>
    <property file="build.properties"/>
    
    <property name="dist" value="./dist"/>
    <property name="doc" value="./doc"/>
    <property name="build" value="./build"/>
    <property name="tools" value="./tools"/>
    
    <property name="suntheme" value="suntheme"/>
    <property name="suntheme.build" value="build/suntheme"/>
    <property name="suntheme.path"  value="com/sun/webui/jsf/suntheme"/>
    <property name="suntheme.package"  value="com.sun.webui.jsf.suntheme"/>
    <property name="suntheme.jar" value="webui-jsf-suntheme.jar"/>
    <property name="suntheme.css" value="_sun4"/>
    <property name="suntheme-service-properties" value="suntheme"/>    
    <property name="suntheme-service-class" value="SunthemeThemeService"/>
    <property name="l10n.dir" value="l10n"/>
    
    <!-- Building a theme now depends on webui-jsf.jar 
         In the future it will depend on just the theme implementation
	 jar, but for now the SPI ThemeService 
	 SunthemeThemeService implementation
	 relies on com.sun.webui.theme.ThemeService which is in
	 webui-jsf.jar -->

    <property name="webui.jar"
              value="${components.home}/lib/webui-jsf.jar"/>
    <property name="json.jar"
              value="${components.home}/lib/json-2.jar"/>

    <!-- tools -->
    <property name="tools.jar"
              value="${tools}/javascript/tools.jar"/>
    <property name="rhino.jar"
              value="${tools}/javascript/custom_rhino.jar"/>

    <loadfile property="copyright" srcFile="${doc}/copyright.txt"/>

    <!-- This build script also depends on the webui-jsf-suntheme.jar
	being built first. It uses that jar and the webui-jsf.jar
	to construct the javascript theme. It them updates the
	webui-jsf-suntheme.jar with the javascript theme files. -->

    <!-- Javascript theme properties 
	The javascript theme uses dojo to load localizations
	using the "requireLocalization" method. This requires that a
	defined module path "com/sun/webui/jsf/suntheme/javascript/theme"
	exists and under this path the following "nls" structure.

	     "nls/suntheme.js"
	     "nls/<lang>/suntheme.js"
	     "nls/<lang>-<country>/suntheme.js"
	     "nls/<lang>-<country>-<variant>/suntheme.js"

	"suntheme" would be the localized bundle. The 
	"nls/suntheme.js" file would be the fallback bundle containing
	definitions suitable for any locale. -->

    <property name="suntheme.javascript-theme.path"
	    value="${suntheme.path}/javascript/theme/nls/"/>
    <property name="suntheme.javascript_uncompressed-theme.path"
	    value="${suntheme.path}/javascript_uncompressed/theme/nls/"/>
    <property name="suntheme.javascript-theme.file"
	    value="${suntheme.javascript-theme.path}${suntheme}.js"/>
    <property name="suntheme.javascript_uncompressed-theme.file"
	value="${suntheme.javascript_uncompressed-theme.path}${suntheme}.js"/>

    <target name="checkDependencies">
       <mkdir dir="${suntheme.build}${suntheme.path}"/>
       <uptodate property="theme-jar-uptodate"
	    srcfile="${dist}/${suntheme.jar}"/>
       <uptodate property="webui-jar-uptodate"
	    srcfile="${dist}/${webui.jar}"/>
       <condition property="theme-js-uptodate">
	    <and>
	       <isset property="theme-jar-uptodate"/>
	       <isset property="webui-jar-uptodate"/>
	    </and>
       </condition>
    </target>

    <!-- Note for the theme builder transformation, the javascript
	widget namespace is assumed to be same, this is the
	same assumption as when transforming the theme proper.
	The default "version" is the hardcoded default
	version as defined by the components.  -->

    <target name="buildJsTheme">

       <mkdir dir="${suntheme.build}/${suntheme.javascript-theme.path}"/>
       <mkdir dir="${suntheme.build}/${suntheme.javascript_uncompressed-theme.path}"/>

	<!-- The uncompressed version is the JSON pretty printed version -->
	<java classname="com.sun.webui.theme.ResourceBundleTheme"
		logError="yes"
		failonerror="true" fork="true">
	    <arg value="-dir"/>
<arg value="${suntheme.build}/${suntheme.javascript_uncompressed-theme.path}"/>
	    <arg value="-theme"/>
	    <arg value="${suntheme}"/>
	    <arg value="-prettyprint"/>
	    <arg value="4"/>
	     <classpath>
		 <pathelement path="${json.jar}"/>
		 <pathelement path="${webui.jar}"/>
		 <pathelement path="${dist}/${suntheme.jar}"/>
	     </classpath>
	</java>

	<java classname="com.sun.webui.theme.ResourceBundleTheme"
		failonerror="true" fork="true">
	    <arg value="-dir"/>
<arg value="${suntheme.build}/${suntheme.javascript-theme.path}"/>
	    <arg value="-theme"/>
	    <arg value="${suntheme}"/>
	     <classpath>
		 <pathelement path="${json.jar}"/>
		 <pathelement path="${webui.jar}"/>
		 <pathelement path="${dist}/${suntheme.jar}"/>
	     </classpath>
	</java>

	<!-- supported locales the contents of the l10n directory
	webui-jsf-suntheme_de.jar
	webui-jsf-suntheme_es.jar
	webui-jsf-suntheme_fr.jar
	webui-jsf-suntheme_it.jar
	webui-jsf-suntheme_ja.jar
	webui-jsf-suntheme_ko.jar
	webui-jsf-suntheme_pt_BR.jar
	webui-jsf-suntheme_sv.jar
	webui-jsf-suntheme_zh_CN.jar
	webui-jsf-suntheme_zh_HK.jar
	webui-jsf-suntheme_zh_TW.jar
	-->

	<!-- Don't create localized theme until l10n jars are fixed
	<antcall target="localizeJSTheme">
	    <param name="_locale_" value="de"/>
	    <param name="_dojo-locale_" value="de"/>
	</antcall>
	<antcall target="localizeJSTheme">
	    <param name="_locale_" value="es"/>
	    <param name="_dojo-locale_" value="es"/>
	</antcall>
	<antcall target="localizeJSTheme">
	    <param name="_locale_" value="fr"/>
	    <param name="_dojo-locale_" value="fr"/>
	</antcall>
	<antcall target="localizeJSTheme">
	    <param name="_locale_" value="it"/>
	    <param name="_dojo-locale_" value="it"/>
	</antcall>
	<antcall target="localizeJSTheme">
	    <param name="_locale_" value="ja"/>
	    <param name="_dojo-locale_" value="ja"/>
	</antcall>
	<antcall target="localizeJSTheme">
	    <param name="_locale_" value="ko"/>
	    <param name="_dojo-locale_" value="ko"/>
	</antcall>
	<antcall target="localizeJSTheme">
	    <param name="_locale_" value="pt_BR"/>
	    <param name="_dojo-locale_" value="pt-br"/>
	</antcall>
	<antcall target="localizeJSTheme">
	    <param name="_locale_" value="sv"/>
	    <param name="_dojo-locale_" value="sv"/>
	</antcall>
	<antcall target="localizeJSTheme">
	    <param name="_locale_" value="zh_CN"/>
	    <param name="_dojo-locale_" value="zh-cn"/>
	</antcall>
	<antcall target="localizeJSTheme">
	    <param name="_locale_" value="zh_HK"/>
	    <param name="_dojo-locale_" value="zh-hk"/>
	</antcall>
	<antcall target="localizeJSTheme">
	    <param name="_locale_" value="zh_TW"/>
	    <param name="_dojo-locale_" value="zh-tw"/>
	</antcall>
       -->

       <!-- Add the javascript theme to the theme jar -->
       <jar destfile="${dist}/${suntheme.jar}"
	     update="true"
	     basedir="${suntheme.build}"
	     includes="${suntheme.javascript-theme.path}/**/*.js,${suntheme.javascript_uncompressed-theme.path}/**/*.js">
	</jar>

    </target>

    <!-- Create a JavaScript theme file for each localization -->
    <target name="localizeJSTheme">

       <property name="nlsdir" 
       value="${suntheme.build}/${suntheme.javascript-theme.path}/${_dojo-locale_}"/>
       <mkdir dir="${nlsdir}"/>

	<!-- Create the localized JS themes -->
	<java classname="com.sun.webui.theme.ResourceBundleTheme"
		failonerror="true" fork="true">
	    <arg value="-dir"/>
	    <arg value="${nlsdir}"/>
	    <arg value="-theme"/>
	    <arg value="${suntheme}"/>
	    <arg value="-locale"/>
	    <arg value="${_locale_}"/>
	    <arg value="-l10nJar"/>
	    <arg value="jar:file:${l10n.dir}/webui-jsf-suntheme_${_locale_}.jar!/"/>
	     <classpath>
		 <pathelement path="${json.jar}"/>
		 <pathelement path="${webui.jar}"/>
		 <pathelement path="${dist}/${suntheme.jar}"/>
	     </classpath>
	</java>

       <property name="nlsdir-uncompressed" 
       value="${suntheme.build}/${suntheme.javascript_uncompressed-theme.path}/${_dojo-locale_}"/>
       <mkdir dir="${nlsdir-uncompressed}"/>

	<!-- Create the localized JS themes -->
	<java classname="com.sun.webui.theme.ResourceBundleTheme"
		failonerror="true" fork="true">
	    <arg value="-dir"/>
	    <arg value="${nlsdir-uncompressed}"/>
	    <arg value="-theme"/>
	    <arg value="${suntheme}"/>
	    <arg value="-locale"/>
	    <arg value="${_locale_}"/>
	    <arg value="-prettyprint"/>
	    <arg value="4"/>
	    <arg value="-l10nJar"/>
	    <arg value="jar:file:${l10n.dir}/webui-jsf-suntheme_${_locale_}.jar!/"/>
	     <classpath>
		 <pathelement path="${json.jar}"/>
		 <pathelement path="${webui.jar}"/>
		 <pathelement path="${dist}/${suntheme.jar}"/>
	     </classpath>
	</java>
    </target>

    <!-- ========== all ========== -->
    <!-- This creates the theme jars for component distribution. -->
    <target name="all" depends="buildSunTheme,buildJsTheme" />
    
    <target name="buildSunTheme">
        
        <echo message="Build Sun Theme" /> 
        <antcall target="buildTheme">
            <param name="_build-dir_" value="${suntheme.build}"/>
            <param name="_theme-dir_" value="src/suntheme"/>
            <param name="_theme-name_" value="${suntheme}"/>
            <param name="_theme-name-css_" value="${suntheme.css}"/>
            <param name="_theme-package_" value="${suntheme.package}"/>
            <param name="_theme-path_" value="${suntheme.path}"/>
            <param name="_theme-jar_" value="${suntheme.jar}"/>
            <param name="_theme-service-properties_" 
                   value="${suntheme-service-properties}"/>
            <param name="_theme-service-class_"
                   value="${suntheme-service-class}"/>
            <param name="_theme-service-src_" value="src/suntheme"/>
            <param name="_theme-service-uptodate_"
                   value="suntheme-service-uptodate"/>
        </antcall>
        
    </target> 
    
    <!-- Accept params
	 _build-dir_
	 _theme-dir_
	 _theme-name_
	 _theme-path_
	 _theme-jar_
	 _theme-service-properties_
	 _theme-service-class_
	 _theme-service-src_
	 _theme-service-uptodate_
    -->

    <target name="buildTheme">
        
        <property name="_dest-path_" value="${_build-dir_}/${_theme-path_}"/>

        <mkdir dir="${_build-dir_}" />
        <mkdir dir="${_dest-path_}" />

        <!-- Create templates -->
        <copy todir="${_dest-path_}/templates">
            <fileset dir="${_theme-dir_}/templates">
                <exclude name="**/CVS/**" /> 
            </fileset>
            <filterset>
                <filter token="THEME_CSS" value="${_theme-name-css_}"/>
            </filterset>
        </copy>

        <antcall target="compressJavascript">
            <param name="_theme-name_" value="${suntheme}"/>
            <param name="_theme-name-css_" value="${suntheme.css}"/>
            <param name="_dest-path_" value="${_dest-path_}"/>
            <param name="_src-path_" value="${_theme-dir_}"/>
	</antcall>

        <!-- Create uncompressed javascript 
	     Only copies out of date files -->
        <copy todir="${_dest-path_}/javascript_uncompressed">
            <fileset dir="${_theme-dir_}/javascript">
                <exclude name="**/CVS/**" />
            </fileset>
            <filterset>
                <filter token="THEME" value="${_theme-name_}"/> 
                <filter token="THEME_CSS" value="${_theme-name-css_}"/> 
            </filterset>
        </copy>

        <copy todir="${_dest-path_}/images">
            <fileset dir="${_theme-dir_}/images">
                <exclude name="**/CVS/**" /> 
            </fileset>
        </copy>
        <copy todir="${_dest-path_}/css">
            <fileset dir="${_theme-dir_}/css">
                <exclude name="**/CVS/**" /> 
            </fileset>
            <filterset>
                <filter token="THEME_CSS" value="${_theme-name-css_}"/>
            </filterset>
        </copy>
        <copy tofile="${_dest-path_}/messages/messages.properties"
            file="${_theme-dir_}/messages/messages.properties"/>
        
        <!-- copy messages.properties to messages_en.properties JSF hack -->
        <copy file="${_dest-path_}/messages/messages.properties"
	  tofile="${_dest-path_}/messages/messages_en.properties"/>
        
        <copy todir="${_dest-path_}/properties">
            <fileset dir="${_theme-dir_}/properties">
                <include name="images.properties" />
                <include name="javascript.properties" />
                <include name="stylesheets.properties" />
                <include name="templates.properties" />
            </fileset>
            <filterset>
                <filter token="THEME" value="${_theme-name_}"/>
                <filter token="THEME_PATH" value="/${_theme-path_}"/>
            </filterset>
        </copy>
        
        <!-- copy styles.properties using shorter theme name -->
        <copy todir="${_dest-path_}/properties">
            <fileset dir="${_theme-dir_}/properties">
                <include name="styles.properties" /> 
            </fileset>
            <filterset>
                <filter token="THEME_CSS" value="${_theme-name-css_}"/>
            </filterset>
        </copy>
        <copy todir="${_build-dir_}/META-INF">
            <fileset dir="META-INF">
                <include name="manifest.mf" /> 
                <include name="services/com.sun.webui.theme.ThemeService" /> 
            </fileset>
            <filterset>
                <filter token="DATESTAMP" value="${buildnumber}"/>
                <filter token="THEME" value="${_theme-name_}"/>
                <filter token="FULL_VERSION" value="${FullVersion}"/>
                <filter token="VERSION" value="${Version}"/>
                <filter token="THEME_PACKAGE" value="${_theme-package_}"/>
                <filter token="THEME_SERVICE_CLASS" value="${_theme-service-class_}"/>
            </filterset>
        </copy>
        
        <uptodate property="${_theme-service-uptodate_}"
	      targetfile="${suntheme.build}/${_theme-path_}/${_theme-service-class_}.class">
            <srcfiles dir="${_theme-service-src_}"
                      includes="**/*.java"/>
        </uptodate>
        
        <!-- create the SPI theme properties files from template-->
        <copy file="${_theme-dir_}/${suntheme.path}/${_theme-service-properties_}.properties"
              tofile="${_build-dir_}/${suntheme.path}/${_theme-service-properties_}.properties">
        </copy>
        
        <mkdir dir="${_build-dir_}/src"/>
        
        <!-- Create the SPI Theme Service class at the temporarry
	    directory from template-->
        <copy
	    file="${_theme-dir_}/${suntheme.path}/${_theme-service-class_}.java"
            tofile=
	    "${_build-dir_}/src/${suntheme.path}/${_theme-service-class_}.java">
        </copy> 
         
        <!-- Compile the Theme Service class-->
        <antcall target="compile-theme-service">
            <param name="_java-src_" value="${_build-dir_}/src"/>
            <param name="_dest-dir_" value="${_build-dir_}"/>
            <param name="_uptodate-property_"
                   value="${_theme-service-uptodate_}"/>
        </antcall>

        
        <!-- Delete the temporary directory --> 
        <delete dir="${_build-dir_}/src"/>
        
        <!-- Create the theme jar -->
        <mkdir dir="dist" />
        <jar destfile="dist/${_theme-jar_}"
             basedir="${_build-dir_}"
             manifest="${_build-dir_}/META-INF/manifest.mf">
        </jar>
    </target> 
    

    <!-- _src-path_ and _dest-path_ are args from compressJavascript -->
    <target name="compressedJsUpToDate">

	<uptodate property="compressedJsUpToDate">
	    <srcfiles dir="${_src-path_}" includes="javascript/**/*.js"/>
	    <mapper type="regexp" from="^(.*)$$"
		to="${_dest-path_}/\1"/>
	</uptodate>
    </target>

    <target name="compressJavascript" depends="compressedJsUpToDate"
	    unless="compressedJsUpToDate">

	<!-- Do this before copying to java_script uncompress -->
	<delete dir="${build}/javascript_toCompress"/>
	<mkdir dir="${build}/javascript_toCompress"/>

	<!-- Get the out of date files into the "toCompress" dir -->
	<copy todir="${build}/javascript_toCompress">
	    <fileset dir="${_src-path_}/javascript">
		<exclude name="**/CVS/**" />
		<depend targetDir="${_dest-path_}/javascript_uncompressed"/>
	    </fileset>
            <filterset>
                <filter token="THEME" value="${_theme-name_}"/> 
                <filter token="THEME_CSS" value="${_theme-name-css_}"/> 
            </filterset>
	</copy>

	<java jar="${tools.jar}" failonerror="true" fork="true">
	  <arg value="-compress"/>
	  <arg value="-sourcePath"/>
	  <arg value="${build}/javascript_toCompress"/>
	  <arg value="-rhinoJar"/>
	  <arg value="${rhino.jar}"/>
	  <arg value="-verbose"/>
	</java>

        <!-- Add copyright -->
        <replaceregexp match="^" byline="false" replace="${copyright}"> 
            <fileset dir="${build}/javascript_toCompress"/>
        </replaceregexp>

	<!-- move the compressed files to the javascript directory -->
	<copy todir="${_dest-path_}/javascript">
	    <fileset dir="${build}/javascript_toCompress"/>
	</copy>

	<delete dir="${build}/javascript_toCompress"/>
    </target>
    
    <target name="compile-theme-service"
            unless="${_uptodate-property_}">
        
        <javac srcdir="${_java-src_}" 
               destdir="${_dest-dir_}" deprecation="false"
               debug="${debug}"
               optimize="false"
               source="1.5" target="1.5">
            <compilerarg line="-Xmaxwarns 1000"/>
            <classpath>
                <pathelement path="${webui.jar}"/>
            </classpath>
        </javac>
        
    </target>

    <target name="clean">
        <delete dir="${build}" />
        <delete dir="${dist}" />
    </target>


</project>
