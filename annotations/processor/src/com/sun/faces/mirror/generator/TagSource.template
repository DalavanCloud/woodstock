<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

 Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License.  You can
 obtain a copy of the License at
 https://oss.oracle.com/licenses/CDDL+GPL-1.1
 or LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.

 When distributing the software, include this License Header Notice in each
 file and include the License file at LICENSE.txt.

 GPL Classpath Exception:
 Oracle designates this particular file as subject to the "Classpath"
 exception as provided by Oracle in the GPL Version 2 section of the License
 file that accompanied this code.

 Modifications:
 If applicable, add the following below the License Header, with the fields
 enclosed by brackets [] replaced by your own identifying information:
 "Portions Copyright [year] [name of copyright owner]"

 Contributor(s):
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->
package ${tagPackage};

import javax.el.ELException;
import javax.el.MethodExpression;
import javax.el.ValueExpression;
import javax.faces.FacesException;
import javax.faces.component.UIComponent;
import javax.faces.component.StateHolder;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.event.ValueChangeEvent;
import javax.faces.webapp.UIComponentELTag;
import javax.faces.context.FacesContext;

/**
 * This file was generated automatically on ${date}.
 */

public class ${tagClass} extends UIComponentELTag {
    
    /**
     * Returns the requested component type.
     */
    public String getComponentType() {
        return "${componentInfo.family}";
    }
    
    /**
     * Returns the requested renderer type.
     */
    public String getRendererType() {
#if ($componentInfo.tagRendererType)
        return "${componentInfo.tagRendererType}";
#else
        return null;
#end
    }
    
    /**
     * Release any allocated tag handler attributes.
     */
    public void release() {
        super.release();
#foreach($propertyInfo in $propertyInfos)
#if ($propertyInfo.attributeInfo && !($propertyInfo.name == "id" || $propertyInfo.name == "parent"))
        ${propertyInfo.instanceName} = null;
#end
#end
    }
    
    /**
     * Transfer tag attribute values to component properties.
     */
    protected void setProperties(UIComponent component) {
        super.setProperties(component);
                        
#foreach($propertyInfo in $propertyInfos)
#if ($propertyInfo.attributeInfo)
#if ($propertyInfo.type == "javax.el.MethodExpression")
        if (${propertyInfo.instanceName} != null) {
            try {
                component.getAttributes().put("${propertyInfo.instanceName}", ${propertyInfo.instanceName});
            } catch (ELException e) {
                throw new FacesException(e);
            }
        }
#elseif (!($propertyInfo.name == "id" || $propertyInfo.name == "parent"))
        if (${propertyInfo.instanceName} != null) {
            component.setValueExpression("${propertyInfo.attributeInfo.name}", ${propertyInfo.instanceName});
        }
#end
#end
#end ##foreach($propertyInfo in $propertyInfos)
    }
    

#foreach($propertyInfo in $propertyInfos)
#if ($propertyInfo.attributeInfo && !($propertyInfo.name == "id" || $propertyInfo.name == "parent"))
    /**
     * Set attribute corresponding to the "${propertyInfo.name}" property
     */
#if ($propertyInfo.type == 'javax.el.MethodExpression')
    private MethodExpression ${propertyInfo.instanceName} = null;
    public void ${propertyInfo.attributeInfo.writeMethodName} (MethodExpression ${propertyInfo.instanceName}) {
        this.${propertyInfo.instanceName} = ${propertyInfo.instanceName};
    }
#else
    private ValueExpression ${propertyInfo.instanceName} = null;
    public void ${propertyInfo.attributeInfo.writeMethodName} (ValueExpression ${propertyInfo.instanceName}) {
        this.${propertyInfo.instanceName} = ${propertyInfo.instanceName};
    }
#end
#end ##if ($propertyInfo.attributeInfo)
#end ##foreach($propertyInfo in $propertyInfos)

}
