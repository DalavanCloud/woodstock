/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2007-2018 Oracle and/or its affiliates. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://oss.oracle.com/licenses/CDDL+GPL-1.1
 * or LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */

package com.sun.faces.mirror;

import java.util.regex.Pattern;

/**
 * A base class that defines the basic metadata available for any component
 * feature, whether a property or event.
 *
 * @author gjmurphy
 */
public abstract class FeatureInfo {
    
    /**
     * Pattern used in property info analysis to determine if a name is a Java
     * keyword or reserved word.
     */
    static Pattern JAVA_KEYWORD_PATTERN = Pattern.compile(
            "(" +
            "assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|" +
            "enum|extends|false|final|finally|float|for|goto|if|implements|import|instanceof|int|" +
            "interface|long|native|new|null|package|private|protected|public|return|short|static|" +
            "super|switch|synchronized|this|throw|throws|transient|true|try|void|volatile|while" +
            ")"
    );
    
    /**
     * Returns the name of this feature, which is guaranteed to be unique within
     * the scope of the containing component.
     */
    public abstract String getName();
    
    /**
     * Returns the display name of this property. If no display name was assigned
     * to this feature, should return the feature name.
     */
    public abstract String getDisplayName();
    
    /**
     * Returns a short description of this property. If no short description was
     * assigned to this feature, should return the feature's display name. 
     */
    public abstract String getShortDescription();
    
    /**
     * Returns true if this feature should be hidden at design-time.
     */
    public abstract boolean isHidden();

    private ClassInfo declaringClassInfo;
    
    /**
     * Returns the class info of the class that declared this feature. This is 
     * useful when a property or event is retrieved from a class that reports its 
     * inherited properties and events. Returns null if the super class is 
     * {@code java.lang.Object}.
     */
    public ClassInfo getDeclaringClassInfo() {
        return this.declaringClassInfo;
    }
    
    void setDeclaringClassInfo(ClassInfo declaringClassInfo) {
        this.declaringClassInfo = declaringClassInfo;
    }
    
    /**
     * Returns a unique, generated key for the property specified, suitable for
     * use as a key in a properties resource bundle file, if the property corresponds
     * to a localizable annotation element. For example, the property {@link PropertyInfo#getDisplayName})
     * corresponds to the localizable annotation element {@link com.sun.faces.Property#displayName}
     * so a unique key for it may be generated by calling
     * <pre>
     *    String key = propertyInfo.getKey("displayName");
     * </pre>
     * If the specified property does not correspond to a localizable annotation, 
     * returns null. If the specified property does not exist, throws {@link
     * java.lang.NoSuchMethodException}. Only properties of type {@link java.lang.String}
     * are supported.
     */
    public final String getKey(String propertyName) throws NoSuchMethodException {
        String methodName = "get" + propertyName.substring(0, 1).toUpperCase() + propertyName.substring(1);
        this.getClass().getMethod(methodName);
        String baseName = this.getDeclaringClassInfo().getClassName();
        return baseName + "_" + this.getName() + "_" + propertyName;
    }

}
